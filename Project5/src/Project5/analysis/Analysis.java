/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.analysis;

import Project5.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProg(AProg node);
    void caseAMorestatementsClassmethodstmts(AMorestatementsClassmethodstmts node);
    void caseAEmptyClassmethodstmts(AEmptyClassmethodstmts node);
    void caseAClassexpdefClassmethodstmt(AClassexpdefClassmethodstmt node);
    void caseAFunctiondefClassmethodstmt(AFunctiondefClassmethodstmt node);
    void caseAVariabledefClassmethodstmt(AVariabledefClassmethodstmt node);
    void caseAMorestatementsMethodstmtseqs(AMorestatementsMethodstmtseqs node);
    void caseAEmptyMethodstmtseqs(AEmptyMethodstmtseqs node);
    void caseAFunctiondefMethodstmtseq(AFunctiondefMethodstmtseq node);
    void caseAVariabledefMethodstmtseq(AVariabledefMethodstmtseq node);
    void caseAMethoddefMethodstmtseq(AMethoddefMethodstmtseq node);
    void caseAMethodstmt(AMethodstmt node);
    void caseAMethodexpr(AMethodexpr node);
    void caseAIncrementStmtexprtail(AIncrementStmtexprtail node);
    void caseADecrementStmtexprtail(ADecrementStmtexprtail node);
    void caseAAssignStmtexprtail(AAssignStmtexprtail node);
    void caseAStmtdotidtail(AStmtdotidtail node);
    void caseAMorestatementsStmtseq(AMorestatementsStmtseq node);
    void caseAEmptyStmtseq(AEmptyStmtseq node);
    void caseAAssignexpStmt(AAssignexpStmt node);
    void caseAAssignstringStmt(AAssignstringStmt node);
    void caseAVariabledefStmt(AVariabledefStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAIfelseStmt(AIfelseStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAForStmt(AForStmt node);
    void caseAGetcommandStmt(AGetcommandStmt node);
    void caseAPutcommandStmt(APutcommandStmt node);
    void caseAIncrementStmt(AIncrementStmt node);
    void caseADecrementStmt(ADecrementStmt node);
    void caseAAssignclassStmt(AAssignclassStmt node);
    void caseAListexpStmt(AListexpStmt node);
    void caseAAssignmethodStmt(AAssignmethodStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseAAssignbooleanStmt(AAssignbooleanStmt node);
    void caseASwitchStmt(ASwitchStmt node);
    void caseATailempVarlisttail(ATailempVarlisttail node);
    void caseALargetailVarlisttail(ALargetailVarlisttail node);
    void caseAVarlist(AVarlist node);
    void caseAEmptyVarlist(AEmptyVarlist node);
    void caseAMoreexpVarlisttwotail(AMoreexpVarlisttwotail node);
    void caseAMoreboolVarlisttwotail(AMoreboolVarlisttwotail node);
    void caseAExptailVarlisttwo(AExptailVarlisttwo node);
    void caseABooltailVarlisttwo(ABooltailVarlisttwo node);
    void caseAEmptyVarlisttwo(AEmptyVarlisttwo node);
    void caseAIdtail(AIdtail node);
    void caseABreakpart(ABreakpart node);
    void caseAMorecases(AMorecases node);
    void caseAIntType(AIntType node);
    void caseARealType(ARealType node);
    void caseAStringType(AStringType node);
    void caseABoolType(ABoolType node);
    void caseAVoidType(AVoidType node);
    void caseAIdType(AIdType node);
    void caseAMultiplyMultop(AMultiplyMultop node);
    void caseADivideMultop(ADivideMultop node);
    void caseAPlusAddop(APlusAddop node);
    void caseAMinusAddop(AMinusAddop node);
    void caseADbleqlCond(ADbleqlCond node);
    void caseANeqlCond(ANeqlCond node);
    void caseAGteqlCond(AGteqlCond node);
    void caseALteqlCond(ALteqlCond node);
    void caseAGtCond(AGtCond node);
    void caseALtCond(ALtCond node);
    void caseAVarIdbool(AVarIdbool node);
    void caseABoolIdbool(ABoolIdbool node);
    void caseATrueBoolean(ATrueBoolean node);
    void caseAFalseBoolean(AFalseBoolean node);
    void caseACondBoolean(ACondBoolean node);
    void caseAExpFactor(AExpFactor node);
    void caseAMinusfactorFactor(AMinusfactorFactor node);
    void caseAIntegerFactor(AIntegerFactor node);
    void caseARealFactor(ARealFactor node);
    void caseAIdFactor(AIdFactor node);
    void caseAListFactor(AListFactor node);
    void caseAClassmethodFactor(AClassmethodFactor node);
    void caseAMultopTerm(AMultopTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAAddopExpr(AAddopExpr node);
    void caseATermExpr(ATermExpr node);

    void caseTBlank(TBlank node);
    void caseTBegin(TBegin node);
    void caseTEnd(TEnd node);
    void caseTClas(TClas node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTThen(TThen node);
    void caseTNew(TNew node);
    void caseTReturn(TReturn node);
    void caseTInt(TInt node);
    void caseTReal(TReal node);
    void caseTString(TString node);
    void caseTBool(TBool node);
    void caseTVoid(TVoid node);
    void caseTSwitch(TSwitch node);
    void caseTCase(TCase node);
    void caseTDefault(TDefault node);
    void caseTBreak(TBreak node);
    void caseTPut(TPut node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTGet(TGet node);
    void caseTUnderscore(TUnderscore node);
    void caseTRparen(TRparen node);
    void caseTLparen(TLparen node);
    void caseTRcurly(TRcurly node);
    void caseTLcurly(TLcurly node);
    void caseTRbrace(TRbrace node);
    void caseTLbrace(TLbrace node);
    void caseTGt(TGt node);
    void caseTLt(TLt node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDivide(TDivide node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTEquals(TEquals node);
    void caseTExc(TExc node);
    void caseTPeriod(TPeriod node);
    void caseTComma(TComma node);
    void caseTDblquote(TDblquote node);
    void caseTSubset(TSubset node);
    void caseTStringlit(TStringlit node);
    void caseTId(TId node);
    void caseTRealnum(TRealnum node);
    void caseTIntnum(TIntnum node);
    void caseTDoubleequals(TDoubleequals node);
    void caseTNotequals(TNotequals node);
    void caseTGtequals(TGtequals node);
    void caseTLtequals(TLtequals node);
    void caseTAssign(TAssign node);
    void caseEOF(EOF node);
}
