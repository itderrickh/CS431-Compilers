/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.analysis;

import java.util.*;
import Project5.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMorestatementsClassmethodstmts(AMorestatementsClassmethodstmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyClassmethodstmts(AEmptyClassmethodstmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassexpdefClassmethodstmt(AClassexpdefClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctiondefClassmethodstmt(AFunctiondefClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariabledefClassmethodstmt(AVariabledefClassmethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMorestatementsMethodstmtseqs(AMorestatementsMethodstmtseqs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyMethodstmtseqs(AEmptyMethodstmtseqs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctiondefMethodstmtseq(AFunctiondefMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariabledefMethodstmtseq(AVariabledefMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethoddefMethodstmtseq(AMethoddefMethodstmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodstmt(AMethodstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodexpr(AMethodexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementStmtexprtail(AIncrementStmtexprtail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrementStmtexprtail(ADecrementStmtexprtail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStmtexprtail(AAssignStmtexprtail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtdotidtail(AStmtdotidtail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMorestatementsStmtseq(AMorestatementsStmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStmtseq(AEmptyStmtseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignexpStmt(AAssignexpStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignstringStmt(AAssignstringStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariabledefStmt(AVariabledefStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfelseStmt(AIfelseStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGetcommandStmt(AGetcommandStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPutcommandStmt(APutcommandStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementStmt(AIncrementStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecrementStmt(ADecrementStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignclassStmt(AAssignclassStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListexpStmt(AListexpStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmethodStmt(AAssignmethodStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignbooleanStmt(AAssignbooleanStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchStmt(ASwitchStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATailempVarlisttail(ATailempVarlisttail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALargetailVarlisttail(ALargetailVarlisttail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarlist(AVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyVarlist(AEmptyVarlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreexpVarlisttwotail(AMoreexpVarlisttwotail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoreboolVarlisttwotail(AMoreboolVarlisttwotail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExptailVarlisttwo(AExptailVarlisttwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooltailVarlisttwo(ABooltailVarlisttwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyVarlisttwo(AEmptyVarlisttwo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdtail(AIdtail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakpart(ABreakpart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMorecases(AMorecases node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidType(AVoidType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyMultop(AMultiplyMultop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideMultop(ADivideMultop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAddop(APlusAddop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAddop(AMinusAddop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADbleqlCond(ADbleqlCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqlCond(ANeqlCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqlCond(AGteqlCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqlCond(ALteqlCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtCond(AGtCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtCond(ALtCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarIdbool(AVarIdbool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolIdbool(ABoolIdbool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACondBoolean(ACondBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpFactor(AExpFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusfactorFactor(AMinusfactorFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealFactor(ARealFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdFactor(AIdFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListFactor(AListFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassmethodFactor(AClassmethodFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultopTerm(AMultopTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddopExpr(AAddopExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClas(TClas node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPut(TPut node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGet(TGet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnderscore(TUnderscore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRcurly(TRcurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLcurly(TLcurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRbrace(TRbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLbrace(TLbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExc(TExc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPeriod(TPeriod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDblquote(TDblquote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubset(TSubset node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringlit(TStringlit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRealnum(TRealnum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntnum(TIntnum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleequals(TDoubleequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotequals(TNotequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGtequals(TGtequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLtequals(TLtequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
