/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.analysis;

import java.util.*;
import Project5.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getClassmethodstmts() != null)
        {
            node.getClassmethodstmts().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAProg(node);
    }

    public void inAMorestatementsClassmethodstmts(AMorestatementsClassmethodstmts node)
    {
        defaultIn(node);
    }

    public void outAMorestatementsClassmethodstmts(AMorestatementsClassmethodstmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMorestatementsClassmethodstmts(AMorestatementsClassmethodstmts node)
    {
        inAMorestatementsClassmethodstmts(node);
        if(node.getClassmethodstmt() != null)
        {
            node.getClassmethodstmt().apply(this);
        }
        if(node.getClassmethodstmts() != null)
        {
            node.getClassmethodstmts().apply(this);
        }
        outAMorestatementsClassmethodstmts(node);
    }

    public void inAEmptyClassmethodstmts(AEmptyClassmethodstmts node)
    {
        defaultIn(node);
    }

    public void outAEmptyClassmethodstmts(AEmptyClassmethodstmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyClassmethodstmts(AEmptyClassmethodstmts node)
    {
        inAEmptyClassmethodstmts(node);
        outAEmptyClassmethodstmts(node);
    }

    public void inAClassexpdefClassmethodstmt(AClassexpdefClassmethodstmt node)
    {
        defaultIn(node);
    }

    public void outAClassexpdefClassmethodstmt(AClassexpdefClassmethodstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassexpdefClassmethodstmt(AClassexpdefClassmethodstmt node)
    {
        inAClassexpdefClassmethodstmt(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getMethodstmtseqs() != null)
        {
            node.getMethodstmtseqs().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        outAClassexpdefClassmethodstmt(node);
    }

    public void inAFunctiondefClassmethodstmt(AFunctiondefClassmethodstmt node)
    {
        defaultIn(node);
    }

    public void outAFunctiondefClassmethodstmt(AFunctiondefClassmethodstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctiondefClassmethodstmt(AFunctiondefClassmethodstmt node)
    {
        inAFunctiondefClassmethodstmt(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlist() != null)
        {
            node.getVarlist().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunctiondefClassmethodstmt(node);
    }

    public void inAVariabledefClassmethodstmt(AVariabledefClassmethodstmt node)
    {
        defaultIn(node);
    }

    public void outAVariabledefClassmethodstmt(AVariabledefClassmethodstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariabledefClassmethodstmt(AVariabledefClassmethodstmt node)
    {
        inAVariabledefClassmethodstmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PIdtail> copy = new ArrayList<PIdtail>(node.getIdtail());
            Collections.reverse(copy);
            for(PIdtail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariabledefClassmethodstmt(node);
    }

    public void inAMorestatementsMethodstmtseqs(AMorestatementsMethodstmtseqs node)
    {
        defaultIn(node);
    }

    public void outAMorestatementsMethodstmtseqs(AMorestatementsMethodstmtseqs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMorestatementsMethodstmtseqs(AMorestatementsMethodstmtseqs node)
    {
        inAMorestatementsMethodstmtseqs(node);
        if(node.getMethodstmtseq() != null)
        {
            node.getMethodstmtseq().apply(this);
        }
        if(node.getMethodstmtseqs() != null)
        {
            node.getMethodstmtseqs().apply(this);
        }
        outAMorestatementsMethodstmtseqs(node);
    }

    public void inAEmptyMethodstmtseqs(AEmptyMethodstmtseqs node)
    {
        defaultIn(node);
    }

    public void outAEmptyMethodstmtseqs(AEmptyMethodstmtseqs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyMethodstmtseqs(AEmptyMethodstmtseqs node)
    {
        inAEmptyMethodstmtseqs(node);
        outAEmptyMethodstmtseqs(node);
    }

    public void inAFunctiondefMethodstmtseq(AFunctiondefMethodstmtseq node)
    {
        defaultIn(node);
    }

    public void outAFunctiondefMethodstmtseq(AFunctiondefMethodstmtseq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctiondefMethodstmtseq(AFunctiondefMethodstmtseq node)
    {
        inAFunctiondefMethodstmtseq(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlist() != null)
        {
            node.getVarlist().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunctiondefMethodstmtseq(node);
    }

    public void inAVariabledefMethodstmtseq(AVariabledefMethodstmtseq node)
    {
        defaultIn(node);
    }

    public void outAVariabledefMethodstmtseq(AVariabledefMethodstmtseq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariabledefMethodstmtseq(AVariabledefMethodstmtseq node)
    {
        inAVariabledefMethodstmtseq(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PIdtail> copy = new ArrayList<PIdtail>(node.getIdtail());
            Collections.reverse(copy);
            for(PIdtail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariabledefMethodstmtseq(node);
    }

    public void inAMethoddefMethodstmtseq(AMethoddefMethodstmtseq node)
    {
        defaultIn(node);
    }

    public void outAMethoddefMethodstmtseq(AMethoddefMethodstmtseq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethoddefMethodstmtseq(AMethoddefMethodstmtseq node)
    {
        inAMethoddefMethodstmtseq(node);
        if(node.getMethodstmt() != null)
        {
            node.getMethodstmt().apply(this);
        }
        outAMethoddefMethodstmtseq(node);
    }

    public void inAMethodstmt(AMethodstmt node)
    {
        defaultIn(node);
    }

    public void outAMethodstmt(AMethodstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodstmt(AMethodstmt node)
    {
        inAMethodstmt(node);
        if(node.getMethodexpr() != null)
        {
            node.getMethodexpr().apply(this);
        }
        outAMethodstmt(node);
    }

    public void inAMethodexpr(AMethodexpr node)
    {
        defaultIn(node);
    }

    public void outAMethodexpr(AMethodexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodexpr(AMethodexpr node)
    {
        inAMethodexpr(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodexpr(node);
    }

    public void inAIncrementStmtexprtail(AIncrementStmtexprtail node)
    {
        defaultIn(node);
    }

    public void outAIncrementStmtexprtail(AIncrementStmtexprtail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementStmtexprtail(AIncrementStmtexprtail node)
    {
        inAIncrementStmtexprtail(node);
        if(node.getDblplus() != null)
        {
            node.getDblplus().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIncrementStmtexprtail(node);
    }

    public void inADecrementStmtexprtail(ADecrementStmtexprtail node)
    {
        defaultIn(node);
    }

    public void outADecrementStmtexprtail(ADecrementStmtexprtail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementStmtexprtail(ADecrementStmtexprtail node)
    {
        inADecrementStmtexprtail(node);
        if(node.getDblminus() != null)
        {
            node.getDblminus().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADecrementStmtexprtail(node);
    }

    public void inAAssignStmtexprtail(AAssignStmtexprtail node)
    {
        defaultIn(node);
    }

    public void outAAssignStmtexprtail(AAssignStmtexprtail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmtexprtail(AAssignStmtexprtail node)
    {
        inAAssignStmtexprtail(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStmtexprtail(node);
    }

    public void inAStmtdotidtail(AStmtdotidtail node)
    {
        defaultIn(node);
    }

    public void outAStmtdotidtail(AStmtdotidtail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtdotidtail(AStmtdotidtail node)
    {
        inAStmtdotidtail(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlisttwo() != null)
        {
            node.getVarlisttwo().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPeriod() != null)
        {
            node.getPeriod().apply(this);
        }
        outAStmtdotidtail(node);
    }

    public void inAMorestatementsStmtseq(AMorestatementsStmtseq node)
    {
        defaultIn(node);
    }

    public void outAMorestatementsStmtseq(AMorestatementsStmtseq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMorestatementsStmtseq(AMorestatementsStmtseq node)
    {
        inAMorestatementsStmtseq(node);
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAMorestatementsStmtseq(node);
    }

    public void inAEmptyStmtseq(AEmptyStmtseq node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmtseq(AEmptyStmtseq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmtseq(AEmptyStmtseq node)
    {
        inAEmptyStmtseq(node);
        outAEmptyStmtseq(node);
    }

    public void inAAssignexpStmt(AAssignexpStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignexpStmt(AAssignexpStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignexpStmt(AAssignexpStmt node)
    {
        inAAssignexpStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignexpStmt(node);
    }

    public void inAAssignstringStmt(AAssignstringStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignstringStmt(AAssignstringStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignstringStmt(AAssignstringStmt node)
    {
        inAAssignstringStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStringlit() != null)
        {
            node.getStringlit().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignstringStmt(node);
    }

    public void inAVariabledefStmt(AVariabledefStmt node)
    {
        defaultIn(node);
    }

    public void outAVariabledefStmt(AVariabledefStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariabledefStmt(AVariabledefStmt node)
    {
        inAVariabledefStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<PIdtail> copy = new ArrayList<PIdtail>(node.getIdtail());
            Collections.reverse(copy);
            for(PIdtail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariabledefStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getIdbool() != null)
        {
            node.getIdbool().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAIfelseStmt(AIfelseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmt(AIfelseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseStmt(AIfelseStmt node)
    {
        inAIfelseStmt(node);
        if(node.getRctwo() != null)
        {
            node.getRctwo().apply(this);
        }
        if(node.getStwo() != null)
        {
            node.getStwo().apply(this);
        }
        if(node.getLctwo() != null)
        {
            node.getLctwo().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getIdbool() != null)
        {
            node.getIdbool().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelseStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getStmtexprtail() != null)
        {
            node.getStmtexprtail().apply(this);
        }
        if(node.getStwo() != null)
        {
            node.getStwo().apply(this);
        }
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStmt(node);
    }

    public void inAGetcommandStmt(AGetcommandStmt node)
    {
        defaultIn(node);
    }

    public void outAGetcommandStmt(AGetcommandStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetcommandStmt(AGetcommandStmt node)
    {
        inAGetcommandStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getGet() != null)
        {
            node.getGet().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGetcommandStmt(node);
    }

    public void inAPutcommandStmt(APutcommandStmt node)
    {
        defaultIn(node);
    }

    public void outAPutcommandStmt(APutcommandStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPutcommandStmt(APutcommandStmt node)
    {
        inAPutcommandStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getPut() != null)
        {
            node.getPut().apply(this);
        }
        outAPutcommandStmt(node);
    }

    public void inAIncrementStmt(AIncrementStmt node)
    {
        defaultIn(node);
    }

    public void outAIncrementStmt(AIncrementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementStmt(AIncrementStmt node)
    {
        inAIncrementStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDblplus() != null)
        {
            node.getDblplus().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIncrementStmt(node);
    }

    public void inADecrementStmt(ADecrementStmt node)
    {
        defaultIn(node);
    }

    public void outADecrementStmt(ADecrementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementStmt(ADecrementStmt node)
    {
        inADecrementStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDblminus() != null)
        {
            node.getDblminus().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADecrementStmt(node);
    }

    public void inAAssignclassStmt(AAssignclassStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignclassStmt(AAssignclassStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignclassStmt(AAssignclassStmt node)
    {
        inAAssignclassStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getRid() != null)
        {
            node.getRid().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignclassStmt(node);
    }

    public void inAListexpStmt(AListexpStmt node)
    {
        defaultIn(node);
    }

    public void outAListexpStmt(AListexpStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListexpStmt(AListexpStmt node)
    {
        inAListexpStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlisttwo() != null)
        {
            node.getVarlisttwo().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListexpStmt(node);
    }

    public void inAAssignmethodStmt(AAssignmethodStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmethodStmt(AAssignmethodStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmethodStmt(AAssignmethodStmt node)
    {
        inAAssignmethodStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PStmtdotidtail> copy = new ArrayList<PStmtdotidtail>(node.getStmtdotidtail());
            Collections.reverse(copy);
            for(PStmtdotidtail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlisttwo() != null)
        {
            node.getVarlisttwo().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIdtwo() != null)
        {
            node.getIdtwo().apply(this);
        }
        if(node.getPeriod() != null)
        {
            node.getPeriod().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignmethodStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAAssignbooleanStmt(AAssignbooleanStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignbooleanStmt(AAssignbooleanStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignbooleanStmt(AAssignbooleanStmt node)
    {
        inAAssignbooleanStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignbooleanStmt(node);
    }

    public void inASwitchStmt(ASwitchStmt node)
    {
        defaultIn(node);
    }

    public void outASwitchStmt(ASwitchStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStmt(ASwitchStmt node)
    {
        inASwitchStmt(node);
        if(node.getRctwo() != null)
        {
            node.getRctwo().apply(this);
        }
        if(node.getStwo() != null)
        {
            node.getStwo().apply(this);
        }
        if(node.getColtwo() != null)
        {
            node.getColtwo().apply(this);
        }
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        {
            List<PMorecases> copy = new ArrayList<PMorecases>(node.getMorecases());
            Collections.reverse(copy);
            for(PMorecases e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBreakpart() != null)
        {
            node.getBreakpart().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRcone() != null)
        {
            node.getRcone().apply(this);
        }
        if(node.getIntnum() != null)
        {
            node.getIntnum().apply(this);
        }
        if(node.getLctwo() != null)
        {
            node.getLctwo().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        outASwitchStmt(node);
    }

    public void inATailempVarlisttail(ATailempVarlisttail node)
    {
        defaultIn(node);
    }

    public void outATailempVarlisttail(ATailempVarlisttail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailempVarlisttail(ATailempVarlisttail node)
    {
        inATailempVarlisttail(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATailempVarlisttail(node);
    }

    public void inALargetailVarlisttail(ALargetailVarlisttail node)
    {
        defaultIn(node);
    }

    public void outALargetailVarlisttail(ALargetailVarlisttail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALargetailVarlisttail(ALargetailVarlisttail node)
    {
        inALargetailVarlisttail(node);
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outALargetailVarlisttail(node);
    }

    public void inAVarlist(AVarlist node)
    {
        defaultIn(node);
    }

    public void outAVarlist(AVarlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarlist(AVarlist node)
    {
        inAVarlist(node);
        {
            List<PVarlisttail> copy = new ArrayList<PVarlisttail>(node.getVarlisttail());
            Collections.reverse(copy);
            for(PVarlisttail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarlist(node);
    }

    public void inAEmptyVarlist(AEmptyVarlist node)
    {
        defaultIn(node);
    }

    public void outAEmptyVarlist(AEmptyVarlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVarlist(AEmptyVarlist node)
    {
        inAEmptyVarlist(node);
        outAEmptyVarlist(node);
    }

    public void inAMoreexpVarlisttwotail(AMoreexpVarlisttwotail node)
    {
        defaultIn(node);
    }

    public void outAMoreexpVarlisttwotail(AMoreexpVarlisttwotail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreexpVarlisttwotail(AMoreexpVarlisttwotail node)
    {
        inAMoreexpVarlisttwotail(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreexpVarlisttwotail(node);
    }

    public void inAMoreboolVarlisttwotail(AMoreboolVarlisttwotail node)
    {
        defaultIn(node);
    }

    public void outAMoreboolVarlisttwotail(AMoreboolVarlisttwotail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreboolVarlisttwotail(AMoreboolVarlisttwotail node)
    {
        inAMoreboolVarlisttwotail(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreboolVarlisttwotail(node);
    }

    public void inAExptailVarlisttwo(AExptailVarlisttwo node)
    {
        defaultIn(node);
    }

    public void outAExptailVarlisttwo(AExptailVarlisttwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExptailVarlisttwo(AExptailVarlisttwo node)
    {
        inAExptailVarlisttwo(node);
        {
            List<PVarlisttwotail> copy = new ArrayList<PVarlisttwotail>(node.getVarlisttwotail());
            Collections.reverse(copy);
            for(PVarlisttwotail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExptailVarlisttwo(node);
    }

    public void inABooltailVarlisttwo(ABooltailVarlisttwo node)
    {
        defaultIn(node);
    }

    public void outABooltailVarlisttwo(ABooltailVarlisttwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooltailVarlisttwo(ABooltailVarlisttwo node)
    {
        inABooltailVarlisttwo(node);
        {
            List<PVarlisttwotail> copy = new ArrayList<PVarlisttwotail>(node.getVarlisttwotail());
            Collections.reverse(copy);
            for(PVarlisttwotail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooltailVarlisttwo(node);
    }

    public void inAEmptyVarlisttwo(AEmptyVarlisttwo node)
    {
        defaultIn(node);
    }

    public void outAEmptyVarlisttwo(AEmptyVarlisttwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVarlisttwo(AEmptyVarlisttwo node)
    {
        inAEmptyVarlisttwo(node);
        outAEmptyVarlisttwo(node);
    }

    public void inAIdtail(AIdtail node)
    {
        defaultIn(node);
    }

    public void outAIdtail(AIdtail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdtail(AIdtail node)
    {
        inAIdtail(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAIdtail(node);
    }

    public void inABreakpart(ABreakpart node)
    {
        defaultIn(node);
    }

    public void outABreakpart(ABreakpart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakpart(ABreakpart node)
    {
        inABreakpart(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakpart(node);
    }

    public void inAMorecases(AMorecases node)
    {
        defaultIn(node);
    }

    public void outAMorecases(AMorecases node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMorecases(AMorecases node)
    {
        inAMorecases(node);
        if(node.getBreakpart() != null)
        {
            node.getBreakpart().apply(this);
        }
        if(node.getStmtseq() != null)
        {
            node.getStmtseq().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getIntnum() != null)
        {
            node.getIntnum().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAMorecases(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAVoidType(AVoidType node)
    {
        defaultIn(node);
    }

    public void outAVoidType(AVoidType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidType(AVoidType node)
    {
        inAVoidType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidType(node);
    }

    public void inAIdType(AIdType node)
    {
        defaultIn(node);
    }

    public void outAIdType(AIdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        inAIdType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdType(node);
    }

    public void inAMultiplyMultop(AMultiplyMultop node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultop(AMultiplyMultop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultop(AMultiplyMultop node)
    {
        inAMultiplyMultop(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        outAMultiplyMultop(node);
    }

    public void inADivideMultop(ADivideMultop node)
    {
        defaultIn(node);
    }

    public void outADivideMultop(ADivideMultop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultop(ADivideMultop node)
    {
        inADivideMultop(node);
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        outADivideMultop(node);
    }

    public void inAPlusAddop(APlusAddop node)
    {
        defaultIn(node);
    }

    public void outAPlusAddop(APlusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddop(APlusAddop node)
    {
        inAPlusAddop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddop(node);
    }

    public void inAMinusAddop(AMinusAddop node)
    {
        defaultIn(node);
    }

    public void outAMinusAddop(AMinusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddop(AMinusAddop node)
    {
        inAMinusAddop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddop(node);
    }

    public void inADbleqlCond(ADbleqlCond node)
    {
        defaultIn(node);
    }

    public void outADbleqlCond(ADbleqlCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADbleqlCond(ADbleqlCond node)
    {
        inADbleqlCond(node);
        if(node.getDoubleequals() != null)
        {
            node.getDoubleequals().apply(this);
        }
        outADbleqlCond(node);
    }

    public void inANeqlCond(ANeqlCond node)
    {
        defaultIn(node);
    }

    public void outANeqlCond(ANeqlCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqlCond(ANeqlCond node)
    {
        inANeqlCond(node);
        if(node.getNotequals() != null)
        {
            node.getNotequals().apply(this);
        }
        outANeqlCond(node);
    }

    public void inAGteqlCond(AGteqlCond node)
    {
        defaultIn(node);
    }

    public void outAGteqlCond(AGteqlCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqlCond(AGteqlCond node)
    {
        inAGteqlCond(node);
        if(node.getGtequals() != null)
        {
            node.getGtequals().apply(this);
        }
        outAGteqlCond(node);
    }

    public void inALteqlCond(ALteqlCond node)
    {
        defaultIn(node);
    }

    public void outALteqlCond(ALteqlCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqlCond(ALteqlCond node)
    {
        inALteqlCond(node);
        if(node.getLtequals() != null)
        {
            node.getLtequals().apply(this);
        }
        outALteqlCond(node);
    }

    public void inAGtCond(AGtCond node)
    {
        defaultIn(node);
    }

    public void outAGtCond(AGtCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtCond(AGtCond node)
    {
        inAGtCond(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCond(node);
    }

    public void inALtCond(ALtCond node)
    {
        defaultIn(node);
    }

    public void outALtCond(ALtCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtCond(ALtCond node)
    {
        inALtCond(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCond(node);
    }

    public void inAVarIdbool(AVarIdbool node)
    {
        defaultIn(node);
    }

    public void outAVarIdbool(AVarIdbool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdbool(AVarIdbool node)
    {
        inAVarIdbool(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarIdbool(node);
    }

    public void inABoolIdbool(ABoolIdbool node)
    {
        defaultIn(node);
    }

    public void outABoolIdbool(ABoolIdbool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolIdbool(ABoolIdbool node)
    {
        inABoolIdbool(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABoolIdbool(node);
    }

    public void inATrueBoolean(ATrueBoolean node)
    {
        defaultIn(node);
    }

    public void outATrueBoolean(ATrueBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        inATrueBoolean(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBoolean(node);
    }

    public void inAFalseBoolean(AFalseBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalseBoolean(AFalseBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        inAFalseBoolean(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBoolean(node);
    }

    public void inACondBoolean(ACondBoolean node)
    {
        defaultIn(node);
    }

    public void outACondBoolean(ACondBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondBoolean(ACondBoolean node)
    {
        inACondBoolean(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACondBoolean(node);
    }

    public void inAExpFactor(AExpFactor node)
    {
        defaultIn(node);
    }

    public void outAExpFactor(AExpFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFactor(AExpFactor node)
    {
        inAExpFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outAExpFactor(node);
    }

    public void inAMinusfactorFactor(AMinusfactorFactor node)
    {
        defaultIn(node);
    }

    public void outAMinusfactorFactor(AMinusfactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusfactorFactor(AMinusfactorFactor node)
    {
        inAMinusfactorFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusfactorFactor(node);
    }

    public void inAIntegerFactor(AIntegerFactor node)
    {
        defaultIn(node);
    }

    public void outAIntegerFactor(AIntegerFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        inAIntegerFactor(node);
        if(node.getIntnum() != null)
        {
            node.getIntnum().apply(this);
        }
        outAIntegerFactor(node);
    }

    public void inARealFactor(ARealFactor node)
    {
        defaultIn(node);
    }

    public void outARealFactor(ARealFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealFactor(ARealFactor node)
    {
        inARealFactor(node);
        if(node.getRealnum() != null)
        {
            node.getRealnum().apply(this);
        }
        outARealFactor(node);
    }

    public void inAIdFactor(AIdFactor node)
    {
        defaultIn(node);
    }

    public void outAIdFactor(AIdFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFactor(AIdFactor node)
    {
        inAIdFactor(node);
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFactor(node);
    }

    public void inAListFactor(AListFactor node)
    {
        defaultIn(node);
    }

    public void outAListFactor(AListFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListFactor(AListFactor node)
    {
        inAListFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlisttwo() != null)
        {
            node.getVarlisttwo().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListFactor(node);
    }

    public void inAClassmethodFactor(AClassmethodFactor node)
    {
        defaultIn(node);
    }

    public void outAClassmethodFactor(AClassmethodFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassmethodFactor(AClassmethodFactor node)
    {
        inAClassmethodFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getVarlisttwo() != null)
        {
            node.getVarlisttwo().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getNextid() != null)
        {
            node.getNextid().apply(this);
        }
        if(node.getPeriod() != null)
        {
            node.getPeriod().apply(this);
        }
        if(node.getSubset() != null)
        {
            node.getSubset().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAClassmethodFactor(node);
    }

    public void inAMultopTerm(AMultopTerm node)
    {
        defaultIn(node);
    }

    public void outAMultopTerm(AMultopTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultopTerm(AMultopTerm node)
    {
        inAMultopTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMultop() != null)
        {
            node.getMultop().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultopTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAAddopExpr(AAddopExpr node)
    {
        defaultIn(node);
    }

    public void outAAddopExpr(AAddopExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddopExpr(AAddopExpr node)
    {
        inAAddopExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getAddop() != null)
        {
            node.getAddop().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAddopExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }
}
