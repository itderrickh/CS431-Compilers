/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.parser;

import Project5.lexer.*;
import Project5.node.*;
import Project5.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProg */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AMorestatementsClassmethodstmts */
		    {
			ArrayList<Object> list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AEmptyClassmethodstmts */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AClassexpdefClassmethodstmt */
		    {
			ArrayList<Object> list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AFunctiondefClassmethodstmt */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AAvariabledefclassmethodstmt1Classmethodstmt */
		    {
			ArrayList<Object> list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AAvariabledefclassmethodstmt2Classmethodstmt */
		    {
			ArrayList<Object> list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AMorestatementsMethodstmtseqs */
		    {
			ArrayList<Object> list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AEmptyMethodstmtseqs */
		    {
			ArrayList<Object> list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AFunctiondefMethodstmtseq */
		    {
			ArrayList<Object> list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AAvariabledefmethodstmtseq1Methodstmtseq */
		    {
			ArrayList<Object> list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce AAvariabledefmethodstmtseq2Methodstmtseq */
		    {
			ArrayList<Object> list = new11();
			push(goTo(4), list, false);
		    }
		    break;
                    case 12: /* reduce AMethoddefMethodstmtseq */
		    {
			ArrayList<Object> list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AMethodstmt */
		    {
			ArrayList<Object> list = new13();
			push(goTo(5), list, false);
		    }
		    break;
                    case 14: /* reduce AAmethodexpr1Methodexpr */
		    {
			ArrayList<Object> list = new14();
			push(goTo(6), list, false);
		    }
		    break;
                    case 15: /* reduce AAmethodexpr2Methodexpr */
		    {
			ArrayList<Object> list = new15();
			push(goTo(6), list, false);
		    }
		    break;
                    case 16: /* reduce AIncrementStmtexprtail */
		    {
			ArrayList<Object> list = new16();
			push(goTo(7), list, false);
		    }
		    break;
                    case 17: /* reduce ADecrementStmtexprtail */
		    {
			ArrayList<Object> list = new17();
			push(goTo(7), list, false);
		    }
		    break;
                    case 18: /* reduce AAssignStmtexprtail */
		    {
			ArrayList<Object> list = new18();
			push(goTo(7), list, false);
		    }
		    break;
                    case 19: /* reduce AStmtdotidtail */
		    {
			ArrayList<Object> list = new19();
			push(goTo(8), list, false);
		    }
		    break;
                    case 20: /* reduce AMorestatementsStmtseq */
		    {
			ArrayList<Object> list = new20();
			push(goTo(9), list, false);
		    }
		    break;
                    case 21: /* reduce AEmptyStmtseq */
		    {
			ArrayList<Object> list = new21();
			push(goTo(9), list, false);
		    }
		    break;
                    case 22: /* reduce AAassignexpstmt1Stmt */
		    {
			ArrayList<Object> list = new22();
			push(goTo(10), list, false);
		    }
		    break;
                    case 23: /* reduce AAassignexpstmt2Stmt */
		    {
			ArrayList<Object> list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AAassignstringstmt1Stmt */
		    {
			ArrayList<Object> list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce AAassignstringstmt2Stmt */
		    {
			ArrayList<Object> list = new25();
			push(goTo(10), list, false);
		    }
		    break;
                    case 26: /* reduce AAvariabledefstmt1Stmt */
		    {
			ArrayList<Object> list = new26();
			push(goTo(10), list, false);
		    }
		    break;
                    case 27: /* reduce AAvariabledefstmt2Stmt */
		    {
			ArrayList<Object> list = new27();
			push(goTo(10), list, false);
		    }
		    break;
                    case 28: /* reduce AAvariabledefstmt3Stmt */
		    {
			ArrayList<Object> list = new28();
			push(goTo(10), list, false);
		    }
		    break;
                    case 29: /* reduce AAvariabledefstmt4Stmt */
		    {
			ArrayList<Object> list = new29();
			push(goTo(10), list, false);
		    }
		    break;
                    case 30: /* reduce AIfStmt */
		    {
			ArrayList<Object> list = new30();
			push(goTo(10), list, false);
		    }
		    break;
                    case 31: /* reduce AIfelseStmt */
		    {
			ArrayList<Object> list = new31();
			push(goTo(10), list, false);
		    }
		    break;
                    case 32: /* reduce AWhileStmt */
		    {
			ArrayList<Object> list = new32();
			push(goTo(10), list, false);
		    }
		    break;
                    case 33: /* reduce AAforstmt1Stmt */
		    {
			ArrayList<Object> list = new33();
			push(goTo(10), list, false);
		    }
		    break;
                    case 34: /* reduce AAforstmt2Stmt */
		    {
			ArrayList<Object> list = new34();
			push(goTo(10), list, false);
		    }
		    break;
                    case 35: /* reduce AAgetcommandstmt1Stmt */
		    {
			ArrayList<Object> list = new35();
			push(goTo(10), list, false);
		    }
		    break;
                    case 36: /* reduce AAgetcommandstmt2Stmt */
		    {
			ArrayList<Object> list = new36();
			push(goTo(10), list, false);
		    }
		    break;
                    case 37: /* reduce AAputcommandstmt1Stmt */
		    {
			ArrayList<Object> list = new37();
			push(goTo(10), list, false);
		    }
		    break;
                    case 38: /* reduce AAputcommandstmt2Stmt */
		    {
			ArrayList<Object> list = new38();
			push(goTo(10), list, false);
		    }
		    break;
                    case 39: /* reduce AAincrementstmt1Stmt */
		    {
			ArrayList<Object> list = new39();
			push(goTo(10), list, false);
		    }
		    break;
                    case 40: /* reduce AAincrementstmt2Stmt */
		    {
			ArrayList<Object> list = new40();
			push(goTo(10), list, false);
		    }
		    break;
                    case 41: /* reduce AAdecrementstmt1Stmt */
		    {
			ArrayList<Object> list = new41();
			push(goTo(10), list, false);
		    }
		    break;
                    case 42: /* reduce AAdecrementstmt2Stmt */
		    {
			ArrayList<Object> list = new42();
			push(goTo(10), list, false);
		    }
		    break;
                    case 43: /* reduce AAassignclassstmt1Stmt */
		    {
			ArrayList<Object> list = new43();
			push(goTo(10), list, false);
		    }
		    break;
                    case 44: /* reduce AAassignclassstmt2Stmt */
		    {
			ArrayList<Object> list = new44();
			push(goTo(10), list, false);
		    }
		    break;
                    case 45: /* reduce AListexpStmt */
		    {
			ArrayList<Object> list = new45();
			push(goTo(10), list, false);
		    }
		    break;
                    case 46: /* reduce AAassignmethodstmt1Stmt */
		    {
			ArrayList<Object> list = new46();
			push(goTo(10), list, false);
		    }
		    break;
                    case 47: /* reduce AAassignmethodstmt2Stmt */
		    {
			ArrayList<Object> list = new47();
			push(goTo(10), list, false);
		    }
		    break;
                    case 48: /* reduce AAassignmethodstmt3Stmt */
		    {
			ArrayList<Object> list = new48();
			push(goTo(10), list, false);
		    }
		    break;
                    case 49: /* reduce AAassignmethodstmt4Stmt */
		    {
			ArrayList<Object> list = new49();
			push(goTo(10), list, false);
		    }
		    break;
                    case 50: /* reduce AReturnStmt */
		    {
			ArrayList<Object> list = new50();
			push(goTo(10), list, false);
		    }
		    break;
                    case 51: /* reduce AAassignbooleanstmt1Stmt */
		    {
			ArrayList<Object> list = new51();
			push(goTo(10), list, false);
		    }
		    break;
                    case 52: /* reduce AAassignbooleanstmt2Stmt */
		    {
			ArrayList<Object> list = new52();
			push(goTo(10), list, false);
		    }
		    break;
                    case 53: /* reduce AAswitchstmt1Stmt */
		    {
			ArrayList<Object> list = new53();
			push(goTo(10), list, false);
		    }
		    break;
                    case 54: /* reduce AAswitchstmt2Stmt */
		    {
			ArrayList<Object> list = new54();
			push(goTo(10), list, false);
		    }
		    break;
                    case 55: /* reduce AAswitchstmt3Stmt */
		    {
			ArrayList<Object> list = new55();
			push(goTo(10), list, false);
		    }
		    break;
                    case 56: /* reduce AAswitchstmt4Stmt */
		    {
			ArrayList<Object> list = new56();
			push(goTo(10), list, false);
		    }
		    break;
                    case 57: /* reduce ATailempVarlisttail */
		    {
			ArrayList<Object> list = new57();
			push(goTo(11), list, false);
		    }
		    break;
                    case 58: /* reduce ALargetailVarlisttail */
		    {
			ArrayList<Object> list = new58();
			push(goTo(11), list, false);
		    }
		    break;
                    case 59: /* reduce AAvarlist1Varlist */
		    {
			ArrayList<Object> list = new59();
			push(goTo(12), list, false);
		    }
		    break;
                    case 60: /* reduce AAvarlist2Varlist */
		    {
			ArrayList<Object> list = new60();
			push(goTo(12), list, false);
		    }
		    break;
                    case 61: /* reduce AAvarlist3Varlist */
		    {
			ArrayList<Object> list = new61();
			push(goTo(12), list, false);
		    }
		    break;
                    case 62: /* reduce AAvarlist4Varlist */
		    {
			ArrayList<Object> list = new62();
			push(goTo(12), list, false);
		    }
		    break;
                    case 63: /* reduce AEmptyVarlist */
		    {
			ArrayList<Object> list = new63();
			push(goTo(12), list, false);
		    }
		    break;
                    case 64: /* reduce AMoreexpVarlisttwotail */
		    {
			ArrayList<Object> list = new64();
			push(goTo(13), list, false);
		    }
		    break;
                    case 65: /* reduce AMoreboolVarlisttwotail */
		    {
			ArrayList<Object> list = new65();
			push(goTo(13), list, false);
		    }
		    break;
                    case 66: /* reduce AAexptailvarlisttwo1Varlisttwo */
		    {
			ArrayList<Object> list = new66();
			push(goTo(14), list, false);
		    }
		    break;
                    case 67: /* reduce AAexptailvarlisttwo2Varlisttwo */
		    {
			ArrayList<Object> list = new67();
			push(goTo(14), list, false);
		    }
		    break;
                    case 68: /* reduce AAbooltailvarlisttwo1Varlisttwo */
		    {
			ArrayList<Object> list = new68();
			push(goTo(14), list, false);
		    }
		    break;
                    case 69: /* reduce AAbooltailvarlisttwo2Varlisttwo */
		    {
			ArrayList<Object> list = new69();
			push(goTo(14), list, false);
		    }
		    break;
                    case 70: /* reduce AEmptyVarlisttwo */
		    {
			ArrayList<Object> list = new70();
			push(goTo(14), list, false);
		    }
		    break;
                    case 71: /* reduce AIdtail */
		    {
			ArrayList<Object> list = new71();
			push(goTo(15), list, false);
		    }
		    break;
                    case 72: /* reduce ABreakpart */
		    {
			ArrayList<Object> list = new72();
			push(goTo(16), list, false);
		    }
		    break;
                    case 73: /* reduce AAmorecases1Morecases */
		    {
			ArrayList<Object> list = new73();
			push(goTo(17), list, false);
		    }
		    break;
                    case 74: /* reduce AAmorecases2Morecases */
		    {
			ArrayList<Object> list = new74();
			push(goTo(17), list, false);
		    }
		    break;
                    case 75: /* reduce AIntType */
		    {
			ArrayList<Object> list = new75();
			push(goTo(18), list, false);
		    }
		    break;
                    case 76: /* reduce ARealType */
		    {
			ArrayList<Object> list = new76();
			push(goTo(18), list, false);
		    }
		    break;
                    case 77: /* reduce AStringType */
		    {
			ArrayList<Object> list = new77();
			push(goTo(18), list, false);
		    }
		    break;
                    case 78: /* reduce ABoolType */
		    {
			ArrayList<Object> list = new78();
			push(goTo(18), list, false);
		    }
		    break;
                    case 79: /* reduce AVoidType */
		    {
			ArrayList<Object> list = new79();
			push(goTo(18), list, false);
		    }
		    break;
                    case 80: /* reduce AIdType */
		    {
			ArrayList<Object> list = new80();
			push(goTo(18), list, false);
		    }
		    break;
                    case 81: /* reduce AMultiplyMultop */
		    {
			ArrayList<Object> list = new81();
			push(goTo(19), list, false);
		    }
		    break;
                    case 82: /* reduce ADivideMultop */
		    {
			ArrayList<Object> list = new82();
			push(goTo(19), list, false);
		    }
		    break;
                    case 83: /* reduce APlusAddop */
		    {
			ArrayList<Object> list = new83();
			push(goTo(20), list, false);
		    }
		    break;
                    case 84: /* reduce AMinusAddop */
		    {
			ArrayList<Object> list = new84();
			push(goTo(20), list, false);
		    }
		    break;
                    case 85: /* reduce ADbleqlCond */
		    {
			ArrayList<Object> list = new85();
			push(goTo(21), list, false);
		    }
		    break;
                    case 86: /* reduce ANeqlCond */
		    {
			ArrayList<Object> list = new86();
			push(goTo(21), list, false);
		    }
		    break;
                    case 87: /* reduce AGteqlCond */
		    {
			ArrayList<Object> list = new87();
			push(goTo(21), list, false);
		    }
		    break;
                    case 88: /* reduce ALteqlCond */
		    {
			ArrayList<Object> list = new88();
			push(goTo(21), list, false);
		    }
		    break;
                    case 89: /* reduce AGtCond */
		    {
			ArrayList<Object> list = new89();
			push(goTo(21), list, false);
		    }
		    break;
                    case 90: /* reduce ALtCond */
		    {
			ArrayList<Object> list = new90();
			push(goTo(21), list, false);
		    }
		    break;
                    case 91: /* reduce AVarIdbool */
		    {
			ArrayList<Object> list = new91();
			push(goTo(22), list, false);
		    }
		    break;
                    case 92: /* reduce ABoolIdbool */
		    {
			ArrayList<Object> list = new92();
			push(goTo(22), list, false);
		    }
		    break;
                    case 93: /* reduce ATrueBoolean */
		    {
			ArrayList<Object> list = new93();
			push(goTo(23), list, false);
		    }
		    break;
                    case 94: /* reduce AFalseBoolean */
		    {
			ArrayList<Object> list = new94();
			push(goTo(23), list, false);
		    }
		    break;
                    case 95: /* reduce ACondBoolean */
		    {
			ArrayList<Object> list = new95();
			push(goTo(23), list, false);
		    }
		    break;
                    case 96: /* reduce AExpFactor */
		    {
			ArrayList<Object> list = new96();
			push(goTo(24), list, false);
		    }
		    break;
                    case 97: /* reduce AMinusfactorFactor */
		    {
			ArrayList<Object> list = new97();
			push(goTo(24), list, false);
		    }
		    break;
                    case 98: /* reduce AIntegerFactor */
		    {
			ArrayList<Object> list = new98();
			push(goTo(24), list, false);
		    }
		    break;
                    case 99: /* reduce ARealFactor */
		    {
			ArrayList<Object> list = new99();
			push(goTo(24), list, false);
		    }
		    break;
                    case 100: /* reduce AAidfactor1Factor */
		    {
			ArrayList<Object> list = new100();
			push(goTo(24), list, false);
		    }
		    break;
                    case 101: /* reduce AAidfactor2Factor */
		    {
			ArrayList<Object> list = new101();
			push(goTo(24), list, false);
		    }
		    break;
                    case 102: /* reduce AListFactor */
		    {
			ArrayList<Object> list = new102();
			push(goTo(24), list, false);
		    }
		    break;
                    case 103: /* reduce AAclassmethodfactor1Factor */
		    {
			ArrayList<Object> list = new103();
			push(goTo(24), list, false);
		    }
		    break;
                    case 104: /* reduce AAclassmethodfactor2Factor */
		    {
			ArrayList<Object> list = new104();
			push(goTo(24), list, false);
		    }
		    break;
                    case 105: /* reduce AMultopTerm */
		    {
			ArrayList<Object> list = new105();
			push(goTo(25), list, false);
		    }
		    break;
                    case 106: /* reduce AFactorTerm */
		    {
			ArrayList<Object> list = new106();
			push(goTo(25), list, false);
		    }
		    break;
                    case 107: /* reduce AAddopExpr */
		    {
			ArrayList<Object> list = new107();
			push(goTo(26), list, false);
		    }
		    break;
                    case 108: /* reduce ATermExpr */
		    {
			ArrayList<Object> list = new108();
			push(goTo(26), list, false);
		    }
		    break;
                    case 109: /* reduce ATerminal$Idtail */
		    {
			ArrayList<Object> list = new109();
			push(goTo(27), list, true);
		    }
		    break;
                    case 110: /* reduce ANonTerminal$Idtail */
		    {
			ArrayList<Object> list = new110();
			push(goTo(27), list, true);
		    }
		    break;
                    case 111: /* reduce ATerminal$Stmtdotidtail */
		    {
			ArrayList<Object> list = new111();
			push(goTo(28), list, true);
		    }
		    break;
                    case 112: /* reduce ANonTerminal$Stmtdotidtail */
		    {
			ArrayList<Object> list = new112();
			push(goTo(28), list, true);
		    }
		    break;
                    case 113: /* reduce ATerminal$Morecases */
		    {
			ArrayList<Object> list = new113();
			push(goTo(29), list, true);
		    }
		    break;
                    case 114: /* reduce ANonTerminal$Morecases */
		    {
			ArrayList<Object> list = new114();
			push(goTo(29), list, true);
		    }
		    break;
                    case 115: /* reduce ATerminal$Varlisttail */
		    {
			ArrayList<Object> list = new115();
			push(goTo(30), list, true);
		    }
		    break;
                    case 116: /* reduce ANonTerminal$Varlisttail */
		    {
			ArrayList<Object> list = new116();
			push(goTo(30), list, true);
		    }
		    break;
                    case 117: /* reduce ATerminal$Varlisttwotail */
		    {
			ArrayList<Object> list = new117();
			push(goTo(31), list, true);
		    }
		    break;
                    case 118: /* reduce ANonTerminal$Varlisttwotail */
		    {
			ArrayList<Object> list = new118();
			push(goTo(31), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TBegin tbeginNode2;
        PClassmethodstmts pclassmethodstmtsNode3;
        TEnd tendNode4;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        pclassmethodstmtsNode3 = (PClassmethodstmts)nodeArrayList2.get(0);
        tendNode4 = (TEnd)nodeArrayList3.get(0);

        pprogNode1 = new AProg(tbeginNode2, pclassmethodstmtsNode3, tendNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMorestatementsClassmethodstmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmts pclassmethodstmtsNode1;
        {
            // Block
        PClassmethodstmts pclassmethodstmtsNode2;
        PClassmethodstmt pclassmethodstmtNode3;
        pclassmethodstmtsNode2 = (PClassmethodstmts)nodeArrayList1.get(0);
        pclassmethodstmtNode3 = (PClassmethodstmt)nodeArrayList2.get(0);

        pclassmethodstmtsNode1 = new AMorestatementsClassmethodstmts(pclassmethodstmtsNode2, pclassmethodstmtNode3);
        }
	nodeList.add(pclassmethodstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEmptyClassmethodstmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PClassmethodstmts pclassmethodstmtsNode1;
        {
            // Block

        pclassmethodstmtsNode1 = new AEmptyClassmethodstmts();
        }
	nodeList.add(pclassmethodstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AClassexpdefClassmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLcurly tlcurlyNode4;
        PMethodstmtseqs pmethodstmtseqsNode5;
        TRcurly trcurlyNode6;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlcurlyNode4 = (TLcurly)nodeArrayList3.get(0);
        pmethodstmtseqsNode5 = (PMethodstmtseqs)nodeArrayList4.get(0);
        trcurlyNode6 = (TRcurly)nodeArrayList5.get(0);

        pclassmethodstmtNode1 = new AClassexpdefClassmethodstmt(tclasNode2, tidNode3, tlcurlyNode4, pmethodstmtseqsNode5, trcurlyNode6);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFunctiondefClassmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarlist pvarlistNode5;
        TRparen trparenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlistNode5 = (PVarlist)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pclassmethodstmtNode1 = new AFunctiondefClassmethodstmt(ptypeNode2, tidNode3, tlparenNode4, pvarlistNode5, trparenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariabledefclassmethodstmt1Classmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pclassmethodstmtNode1 = new AVariabledefClassmethodstmt(tidNode2, listNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAvariabledefclassmethodstmt2Classmethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassmethodstmt pclassmethodstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSemicolon tsemicolonNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pclassmethodstmtNode1 = new AVariabledefClassmethodstmt(tidNode2, listNode4, tcolonNode5, ptypeNode6, tsemicolonNode7);
        }
	nodeList.add(pclassmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMorestatementsMethodstmtseqs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseqs pmethodstmtseqsNode1;
        {
            // Block
        PMethodstmtseqs pmethodstmtseqsNode2;
        PMethodstmtseq pmethodstmtseqNode3;
        pmethodstmtseqsNode2 = (PMethodstmtseqs)nodeArrayList1.get(0);
        pmethodstmtseqNode3 = (PMethodstmtseq)nodeArrayList2.get(0);

        pmethodstmtseqsNode1 = new AMorestatementsMethodstmtseqs(pmethodstmtseqsNode2, pmethodstmtseqNode3);
        }
	nodeList.add(pmethodstmtseqsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AEmptyMethodstmtseqs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PMethodstmtseqs pmethodstmtseqsNode1;
        {
            // Block

        pmethodstmtseqsNode1 = new AEmptyMethodstmtseqs();
        }
	nodeList.add(pmethodstmtseqsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFunctiondefMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarlist pvarlistNode5;
        TRparen trparenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlistNode5 = (PVarlist)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pmethodstmtseqNode1 = new AFunctiondefMethodstmtseq(ptypeNode2, tidNode3, tlparenNode4, pvarlistNode5, trparenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAvariabledefmethodstmtseq1Methodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pmethodstmtseqNode1 = new AVariabledefMethodstmtseq(tidNode2, listNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAvariabledefmethodstmtseq2Methodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSemicolon tsemicolonNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pmethodstmtseqNode1 = new AVariabledefMethodstmtseq(tidNode2, listNode4, tcolonNode5, ptypeNode6, tsemicolonNode7);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMethoddefMethodstmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmtseq pmethodstmtseqNode1;
        {
            // Block
        PMethodstmt pmethodstmtNode2;
        pmethodstmtNode2 = (PMethodstmt)nodeArrayList1.get(0);

        pmethodstmtseqNode1 = new AMethoddefMethodstmtseq(pmethodstmtNode2);
        }
	nodeList.add(pmethodstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMethodstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodstmt pmethodstmtNode1;
        {
            // Block
        PMethodexpr pmethodexprNode2;
        pmethodexprNode2 = (PMethodexpr)nodeArrayList1.get(0);

        pmethodstmtNode1 = new AMethodstmt(pmethodexprNode2);
        }
	nodeList.add(pmethodstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAmethodexpr1Methodexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodexpr pmethodexprNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pmethodexprNode1 = new AMethodexpr(tidNode2, null, tassignNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAmethodexpr2Methodexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodexpr pmethodexprNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pmethodexprNode1 = new AMethodexpr(tidNode2, tsubsetNode3, tassignNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pmethodexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIncrementStmtexprtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtexprtail pstmtexprtailNode1;
        {
            // Block
        TId tidNode2;
        TPlus tplusNode3;
        TPlus tplusNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        tplusNode4 = (TPlus)nodeArrayList3.get(0);

        pstmtexprtailNode1 = new AIncrementStmtexprtail(tidNode2, tplusNode3, tplusNode4);
        }
	nodeList.add(pstmtexprtailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ADecrementStmtexprtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtexprtail pstmtexprtailNode1;
        {
            // Block
        TId tidNode2;
        TMinus tminusNode3;
        TMinus tminusNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        tminusNode4 = (TMinus)nodeArrayList3.get(0);

        pstmtexprtailNode1 = new ADecrementStmtexprtail(tidNode2, tminusNode3, tminusNode4);
        }
	nodeList.add(pstmtexprtailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAssignStmtexprtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtexprtail pstmtexprtailNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pstmtexprtailNode1 = new AAssignStmtexprtail(tidNode2, tassignNode3, pexprNode4);
        }
	nodeList.add(pstmtexprtailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AStmtdotidtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtdotidtail pstmtdotidtailNode1;
        {
            // Block
        TPeriod tperiodNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PVarlisttwo pvarlisttwoNode5;
        TRparen trparenNode6;
        tperiodNode2 = (TPeriod)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pvarlisttwoNode5 = (PVarlisttwo)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);

        pstmtdotidtailNode1 = new AStmtdotidtail(tperiodNode2, tidNode3, tlparenNode4, pvarlisttwoNode5, trparenNode6);
        }
	nodeList.add(pstmtdotidtailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMorestatementsStmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtseq pstmtseqNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmtseq pstmtseqNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtseqNode3 = (PStmtseq)nodeArrayList2.get(0);

        pstmtseqNode1 = new AMorestatementsStmtseq(pstmtNode2, pstmtseqNode3);
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AEmptyStmtseq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtseq pstmtseqNode1;
        {
            // Block

        pstmtseqNode1 = new AEmptyStmtseq();
        }
	nodeList.add(pstmtseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAassignexpstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignexpStmt(tidNode2, null, tassignNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAassignexpstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignexpStmt(tidNode2, tsubsetNode3, tassignNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAassignstringstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        TStringlit tstringlitNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        tstringlitNode5 = (TStringlit)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignstringStmt(tidNode2, null, tassignNode4, tstringlitNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAassignstringstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        TStringlit tstringlitNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        tstringlitNode5 = (TStringlit)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignstringStmt(tidNode2, tsubsetNode3, tassignNode4, tstringlitNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAvariabledefstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TColon tcolonNode4;
        PType ptypeNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TSemicolon tsemicolonNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AVariabledefStmt(tidNode2, listNode3, tcolonNode4, ptypeNode5, null, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAvariabledefstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PType ptypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AVariabledefStmt(tidNode2, listNode4, tcolonNode5, ptypeNode6, null, tsemicolonNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAvariabledefstmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TColon tcolonNode4;
        PType ptypeNode5;
        TSubset tsubsetNode6;
        TSemicolon tsemicolonNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypeNode5 = (PType)nodeArrayList3.get(0);
        tsubsetNode6 = (TSubset)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AVariabledefStmt(tidNode2, listNode3, tcolonNode4, ptypeNode5, tsubsetNode6, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAvariabledefstmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSubset tsubsetNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsubsetNode7 = (TSubset)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pstmtNode1 = new AVariabledefStmt(tidNode2, listNode4, tcolonNode5, ptypeNode6, tsubsetNode7, tsemicolonNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PIdbool pidboolNode4;
        TRparen trparenNode5;
        TThen tthenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pidboolNode4 = (PIdbool)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, tlparenNode3, pidboolNode4, trparenNode5, tthenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIfelseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PIdbool pidboolNode4;
        TRparen trparenNode5;
        TThen tthenNode6;
        TLcurly tlcurlyNode7;
        PStmtseq pstmtseqNode8;
        TRcurly trcurlyNode9;
        TElse telseNode10;
        TLcurly tlcurlyNode11;
        PStmtseq pstmtseqNode12;
        TRcurly trcurlyNode13;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pidboolNode4 = (PIdbool)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        tlcurlyNode7 = (TLcurly)nodeArrayList6.get(0);
        pstmtseqNode8 = (PStmtseq)nodeArrayList7.get(0);
        trcurlyNode9 = (TRcurly)nodeArrayList8.get(0);
        telseNode10 = (TElse)nodeArrayList9.get(0);
        tlcurlyNode11 = (TLcurly)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        trcurlyNode13 = (TRcurly)nodeArrayList12.get(0);

        pstmtNode1 = new AIfelseStmt(tifNode2, tlparenNode3, pidboolNode4, trparenNode5, tthenNode6, tlcurlyNode7, pstmtseqNode8, trcurlyNode9, telseNode10, tlcurlyNode11, pstmtseqNode12, trcurlyNode13);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        TLparen tlparenNode3;
        PBoolean pbooleanNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        PStmtseq pstmtseqNode7;
        TRcurly trcurlyNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pbooleanNode4 = (PBoolean)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        pstmtseqNode7 = (PStmtseq)nodeArrayList6.get(0);
        trcurlyNode8 = (TRcurly)nodeArrayList7.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, tlparenNode3, pbooleanNode4, trparenNode5, tlcurlyNode6, pstmtseqNode7, trcurlyNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAforstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TFor tforNode2;
        TLparen tlparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TId tidNode5;
        TAssign tassignNode6;
        PExpr pexprNode7;
        TSemicolon tsemicolonNode8;
        PBoolean pbooleanNode9;
        TSemicolon tsemicolonNode10;
        PStmtexprtail pstmtexprtailNode11;
        TRparen trparenNode12;
        TLcurly tlcurlyNode13;
        PStmtseq pstmtseqNode14;
        TRcurly trcurlyNode15;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tassignNode6 = (TAssign)nodeArrayList4.get(0);
        pexprNode7 = (PExpr)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);
        pbooleanNode9 = (PBoolean)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);
        pstmtexprtailNode11 = (PStmtexprtail)nodeArrayList9.get(0);
        trparenNode12 = (TRparen)nodeArrayList10.get(0);
        tlcurlyNode13 = (TLcurly)nodeArrayList11.get(0);
        pstmtseqNode14 = (PStmtseq)nodeArrayList12.get(0);
        trcurlyNode15 = (TRcurly)nodeArrayList13.get(0);

        pstmtNode1 = new AForStmt(tforNode2, tlparenNode3, null, tidNode5, tassignNode6, pexprNode7, tsemicolonNode8, pbooleanNode9, tsemicolonNode10, pstmtexprtailNode11, trparenNode12, tlcurlyNode13, pstmtseqNode14, trcurlyNode15);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAforstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TFor tforNode2;
        TLparen tlparenNode3;
        PType ptypeNode4;
        TId tidNode5;
        TAssign tassignNode6;
        PExpr pexprNode7;
        TSemicolon tsemicolonNode8;
        PBoolean pbooleanNode9;
        TSemicolon tsemicolonNode10;
        PStmtexprtail pstmtexprtailNode11;
        TRparen trparenNode12;
        TLcurly tlcurlyNode13;
        PStmtseq pstmtseqNode14;
        TRcurly trcurlyNode15;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tassignNode6 = (TAssign)nodeArrayList5.get(0);
        pexprNode7 = (PExpr)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);
        pbooleanNode9 = (PBoolean)nodeArrayList8.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList9.get(0);
        pstmtexprtailNode11 = (PStmtexprtail)nodeArrayList10.get(0);
        trparenNode12 = (TRparen)nodeArrayList11.get(0);
        tlcurlyNode13 = (TLcurly)nodeArrayList12.get(0);
        pstmtseqNode14 = (PStmtseq)nodeArrayList13.get(0);
        trcurlyNode15 = (TRcurly)nodeArrayList14.get(0);

        pstmtNode1 = new AForStmt(tforNode2, tlparenNode3, ptypeNode4, tidNode5, tassignNode6, pexprNode7, tsemicolonNode8, pbooleanNode9, tsemicolonNode10, pstmtexprtailNode11, trparenNode12, tlcurlyNode13, pstmtseqNode14, trcurlyNode15);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAgetcommandstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        TGet tgetNode5;
        TLparen tlparenNode6;
        TRparen trparenNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        tgetNode5 = (TGet)nodeArrayList3.get(0);
        tlparenNode6 = (TLparen)nodeArrayList4.get(0);
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pstmtNode1 = new AGetcommandStmt(tidNode2, null, tassignNode4, tgetNode5, tlparenNode6, trparenNode7, tsemicolonNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAgetcommandstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        TGet tgetNode5;
        TLparen tlparenNode6;
        TRparen trparenNode7;
        TSemicolon tsemicolonNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        tgetNode5 = (TGet)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);

        pstmtNode1 = new AGetcommandStmt(tidNode2, tsubsetNode3, tassignNode4, tgetNode5, tlparenNode6, trparenNode7, tsemicolonNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAputcommandstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TPut tputNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRparen trparenNode6;
        TSemicolon tsemicolonNode7;
        tputNode2 = (TPut)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trparenNode6 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new APutcommandStmt(tputNode2, tlparenNode3, tidNode4, null, trparenNode6, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAputcommandstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TPut tputNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TSubset tsubsetNode5;
        TRparen trparenNode6;
        TSemicolon tsemicolonNode7;
        tputNode2 = (TPut)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tsubsetNode5 = (TSubset)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pstmtNode1 = new APutcommandStmt(tputNode2, tlparenNode3, tidNode4, tsubsetNode5, trparenNode6, tsemicolonNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAincrementstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TPlus tplusNode4;
        TPlus tplusNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tplusNode4 = (TPlus)nodeArrayList2.get(0);
        tplusNode5 = (TPlus)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AIncrementStmt(tidNode2, null, tplusNode4, tplusNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAincrementstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TPlus tplusNode4;
        TPlus tplusNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tplusNode4 = (TPlus)nodeArrayList3.get(0);
        tplusNode5 = (TPlus)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AIncrementStmt(tidNode2, tsubsetNode3, tplusNode4, tplusNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAdecrementstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TMinus tminusNode4;
        TMinus tminusNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tminusNode4 = (TMinus)nodeArrayList2.get(0);
        tminusNode5 = (TMinus)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new ADecrementStmt(tidNode2, null, tminusNode4, tminusNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAdecrementstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TMinus tminusNode4;
        TMinus tminusNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tminusNode4 = (TMinus)nodeArrayList3.get(0);
        tminusNode5 = (TMinus)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new ADecrementStmt(tidNode2, tsubsetNode3, tminusNode4, tminusNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAassignclassstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        TNew tnewNode5;
        TId tidNode6;
        TLparen tlparenNode7;
        TRparen trparenNode8;
        TSemicolon tsemicolonNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        tnewNode5 = (TNew)nodeArrayList3.get(0);
        tidNode6 = (TId)nodeArrayList4.get(0);
        tlparenNode7 = (TLparen)nodeArrayList5.get(0);
        trparenNode8 = (TRparen)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);

        pstmtNode1 = new AAssignclassStmt(tidNode2, null, tassignNode4, tnewNode5, tidNode6, tlparenNode7, trparenNode8, tsemicolonNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAassignclassstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        TNew tnewNode5;
        TId tidNode6;
        TLparen tlparenNode7;
        TRparen trparenNode8;
        TSemicolon tsemicolonNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        tnewNode5 = (TNew)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tlparenNode7 = (TLparen)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList8.get(0);

        pstmtNode1 = new AAssignclassStmt(tidNode2, tsubsetNode3, tassignNode4, tnewNode5, tidNode6, tlparenNode7, trparenNode8, tsemicolonNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AListexpStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TLparen tlparenNode3;
        PVarlisttwo pvarlisttwoNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pvarlisttwoNode4 = (PVarlisttwo)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AListexpStmt(tidNode2, tlparenNode3, pvarlisttwoNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAassignmethodstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TSemicolon tsemicolonNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparenNode6 = (TLparen)nodeArrayList4.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList5.get(0);
        trparenNode8 = (TRparen)nodeArrayList6.get(0);
        {
            // Block
        }
        tsemicolonNode10 = (TSemicolon)nodeArrayList7.get(0);

        pstmtNode1 = new AAssignmethodStmt(tidNode2, null, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8, listNode9, tsemicolonNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAassignmethodstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TSemicolon tsemicolonNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        {
            // Block
        }
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pstmtNode1 = new AAssignmethodStmt(tidNode2, tsubsetNode3, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8, listNode9, tsemicolonNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAassignmethodstmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TSemicolon tsemicolonNode11;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparenNode6 = (TLparen)nodeArrayList4.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList5.get(0);
        trparenNode8 = (TRparen)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tsemicolonNode11 = (TSemicolon)nodeArrayList8.get(0);

        pstmtNode1 = new AAssignmethodStmt(tidNode2, null, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8, listNode10, tsemicolonNode11);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAassignmethodstmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TSemicolon tsemicolonNode11;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tsemicolonNode11 = (TSemicolon)nodeArrayList9.get(0);

        pstmtNode1 = new AAssignmethodStmt(tidNode2, tsubsetNode3, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8, listNode10, tsemicolonNode11);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAassignbooleanstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TAssign tassignNode4;
        PBoolean pbooleanNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        pbooleanNode5 = (PBoolean)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignbooleanStmt(tidNode2, null, tassignNode4, pbooleanNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAassignbooleanstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TAssign tassignNode4;
        PBoolean pbooleanNode5;
        TSemicolon tsemicolonNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pbooleanNode5 = (PBoolean)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignbooleanStmt(tidNode2, tsubsetNode3, tassignNode4, pbooleanNode5, tsemicolonNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAswitchstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLparen tlparenNode3;
        PExpr pexprNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        TCase tcaseNode7;
        TLparen tlparenNode8;
        TIntnum tintnumNode9;
        TRparen trparenNode10;
        TColon tcolonNode11;
        PStmtseq pstmtseqNode12;
        @SuppressWarnings("unused") Object nullNode13 = null;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TDefault tdefaultNode15;
        TColon tcolonNode16;
        PStmtseq pstmtseqNode17;
        TRcurly trcurlyNode18;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        tcaseNode7 = (TCase)nodeArrayList6.get(0);
        tlparenNode8 = (TLparen)nodeArrayList7.get(0);
        tintnumNode9 = (TIntnum)nodeArrayList8.get(0);
        trparenNode10 = (TRparen)nodeArrayList9.get(0);
        tcolonNode11 = (TColon)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        {
            // Block
        }
        tdefaultNode15 = (TDefault)nodeArrayList12.get(0);
        tcolonNode16 = (TColon)nodeArrayList13.get(0);
        pstmtseqNode17 = (PStmtseq)nodeArrayList14.get(0);
        trcurlyNode18 = (TRcurly)nodeArrayList15.get(0);

        pstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pexprNode4, trparenNode5, tlcurlyNode6, tcaseNode7, tlparenNode8, tintnumNode9, trparenNode10, tcolonNode11, pstmtseqNode12, null, listNode14, tdefaultNode15, tcolonNode16, pstmtseqNode17, trcurlyNode18);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAswitchstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLparen tlparenNode3;
        PExpr pexprNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        TCase tcaseNode7;
        TLparen tlparenNode8;
        TIntnum tintnumNode9;
        TRparen trparenNode10;
        TColon tcolonNode11;
        PStmtseq pstmtseqNode12;
        PBreakpart pbreakpartNode13;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TDefault tdefaultNode15;
        TColon tcolonNode16;
        PStmtseq pstmtseqNode17;
        TRcurly trcurlyNode18;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        tcaseNode7 = (TCase)nodeArrayList6.get(0);
        tlparenNode8 = (TLparen)nodeArrayList7.get(0);
        tintnumNode9 = (TIntnum)nodeArrayList8.get(0);
        trparenNode10 = (TRparen)nodeArrayList9.get(0);
        tcolonNode11 = (TColon)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        pbreakpartNode13 = (PBreakpart)nodeArrayList12.get(0);
        {
            // Block
        }
        tdefaultNode15 = (TDefault)nodeArrayList13.get(0);
        tcolonNode16 = (TColon)nodeArrayList14.get(0);
        pstmtseqNode17 = (PStmtseq)nodeArrayList15.get(0);
        trcurlyNode18 = (TRcurly)nodeArrayList16.get(0);

        pstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pexprNode4, trparenNode5, tlcurlyNode6, tcaseNode7, tlparenNode8, tintnumNode9, trparenNode10, tcolonNode11, pstmtseqNode12, pbreakpartNode13, listNode14, tdefaultNode15, tcolonNode16, pstmtseqNode17, trcurlyNode18);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAswitchstmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLparen tlparenNode3;
        PExpr pexprNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        TCase tcaseNode7;
        TLparen tlparenNode8;
        TIntnum tintnumNode9;
        TRparen trparenNode10;
        TColon tcolonNode11;
        PStmtseq pstmtseqNode12;
        @SuppressWarnings("unused") Object nullNode13 = null;
        LinkedList<Object> listNode15 = new LinkedList<Object>();
        TDefault tdefaultNode16;
        TColon tcolonNode17;
        PStmtseq pstmtseqNode18;
        TRcurly trcurlyNode19;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        tcaseNode7 = (TCase)nodeArrayList6.get(0);
        tlparenNode8 = (TLparen)nodeArrayList7.get(0);
        tintnumNode9 = (TIntnum)nodeArrayList8.get(0);
        trparenNode10 = (TRparen)nodeArrayList9.get(0);
        tcolonNode11 = (TColon)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        {
            // Block
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        listNode14 = (LinkedList)nodeArrayList12.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }
        tdefaultNode16 = (TDefault)nodeArrayList13.get(0);
        tcolonNode17 = (TColon)nodeArrayList14.get(0);
        pstmtseqNode18 = (PStmtseq)nodeArrayList15.get(0);
        trcurlyNode19 = (TRcurly)nodeArrayList16.get(0);

        pstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pexprNode4, trparenNode5, tlcurlyNode6, tcaseNode7, tlparenNode8, tintnumNode9, trparenNode10, tcolonNode11, pstmtseqNode12, null, listNode15, tdefaultNode16, tcolonNode17, pstmtseqNode18, trcurlyNode19);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAswitchstmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSwitch tswitchNode2;
        TLparen tlparenNode3;
        PExpr pexprNode4;
        TRparen trparenNode5;
        TLcurly tlcurlyNode6;
        TCase tcaseNode7;
        TLparen tlparenNode8;
        TIntnum tintnumNode9;
        TRparen trparenNode10;
        TColon tcolonNode11;
        PStmtseq pstmtseqNode12;
        PBreakpart pbreakpartNode13;
        LinkedList<Object> listNode15 = new LinkedList<Object>();
        TDefault tdefaultNode16;
        TColon tcolonNode17;
        PStmtseq pstmtseqNode18;
        TRcurly trcurlyNode19;
        tswitchNode2 = (TSwitch)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tlcurlyNode6 = (TLcurly)nodeArrayList5.get(0);
        tcaseNode7 = (TCase)nodeArrayList6.get(0);
        tlparenNode8 = (TLparen)nodeArrayList7.get(0);
        tintnumNode9 = (TIntnum)nodeArrayList8.get(0);
        trparenNode10 = (TRparen)nodeArrayList9.get(0);
        tcolonNode11 = (TColon)nodeArrayList10.get(0);
        pstmtseqNode12 = (PStmtseq)nodeArrayList11.get(0);
        pbreakpartNode13 = (PBreakpart)nodeArrayList12.get(0);
        {
            // Block
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        listNode14 = (LinkedList)nodeArrayList13.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }
        tdefaultNode16 = (TDefault)nodeArrayList14.get(0);
        tcolonNode17 = (TColon)nodeArrayList15.get(0);
        pstmtseqNode18 = (PStmtseq)nodeArrayList16.get(0);
        trcurlyNode19 = (TRcurly)nodeArrayList17.get(0);

        pstmtNode1 = new ASwitchStmt(tswitchNode2, tlparenNode3, pexprNode4, trparenNode5, tlcurlyNode6, tcaseNode7, tlparenNode8, tintnumNode9, trparenNode10, tcolonNode11, pstmtseqNode12, pbreakpartNode13, listNode15, tdefaultNode16, tcolonNode17, pstmtseqNode18, trcurlyNode19);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATailempVarlisttail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttail pvarlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);

        pvarlisttailNode1 = new ATailempVarlisttail(tcommaNode2, tidNode3, tcolonNode4, ptypeNode5);
        }
	nodeList.add(pvarlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALargetailVarlisttail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttail pvarlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSubset tsubsetNode6;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsubsetNode6 = (TSubset)nodeArrayList5.get(0);

        pvarlisttailNode1 = new ALargetailVarlisttail(tcommaNode2, tidNode3, tcolonNode4, ptypeNode5, tsubsetNode6);
        }
	nodeList.add(pvarlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAvarlist1Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        {
            // Block
        }

        pvarlistNode1 = new AVarlist(tidNode2, tcolonNode3, ptypeNode4, null, listNode6);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAvarlist2Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TSubset tsubsetNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tsubsetNode5 = (TSubset)nodeArrayList4.get(0);
        {
            // Block
        }

        pvarlistNode1 = new AVarlist(tidNode2, tcolonNode3, ptypeNode4, tsubsetNode5, listNode6);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAvarlist3Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pvarlistNode1 = new AVarlist(tidNode2, tcolonNode3, ptypeNode4, null, listNode7);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAvarlist4Varlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlist pvarlistNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TSubset tsubsetNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tsubsetNode5 = (TSubset)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pvarlistNode1 = new AVarlist(tidNode2, tcolonNode3, ptypeNode4, tsubsetNode5, listNode7);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AEmptyVarlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarlist pvarlistNode1;
        {
            // Block

        pvarlistNode1 = new AEmptyVarlist();
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMoreexpVarlisttwotail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwotail pvarlisttwotailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pvarlisttwotailNode1 = new AMoreexpVarlisttwotail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pvarlisttwotailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMoreboolVarlisttwotail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwotail pvarlisttwotailNode1;
        {
            // Block
        TComma tcommaNode2;
        PBoolean pbooleanNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pbooleanNode3 = (PBoolean)nodeArrayList2.get(0);

        pvarlisttwotailNode1 = new AMoreboolVarlisttwotail(tcommaNode2, pbooleanNode3);
        }
	nodeList.add(pvarlisttwotailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAexptailvarlisttwo1Varlisttwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwo pvarlisttwoNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pvarlisttwoNode1 = new AExptailVarlisttwo(pexprNode2, listNode3);
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAexptailvarlisttwo2Varlisttwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwo pvarlisttwoNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarlisttwoNode1 = new AExptailVarlisttwo(pexprNode2, listNode4);
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAbooltailvarlisttwo1Varlisttwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwo pvarlisttwoNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);
        {
            // Block
        }

        pvarlisttwoNode1 = new ABooltailVarlisttwo(pbooleanNode2, listNode3);
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAbooltailvarlisttwo2Varlisttwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarlisttwo pvarlisttwoNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarlisttwoNode1 = new ABooltailVarlisttwo(pbooleanNode2, listNode4);
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AEmptyVarlisttwo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarlisttwo pvarlisttwoNode1;
        {
            // Block

        pvarlisttwoNode1 = new AEmptyVarlisttwo();
        }
	nodeList.add(pvarlisttwoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AIdtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdtail pidtailNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pidtailNode1 = new AIdtail(tcommaNode2, tidNode3);
        }
	nodeList.add(pidtailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ABreakpart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBreakpart pbreakpartNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pbreakpartNode1 = new ABreakpart(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pbreakpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAmorecases1Morecases */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMorecases pmorecasesNode1;
        {
            // Block
        TCase tcaseNode2;
        TLparen tlparenNode3;
        TIntnum tintnumNode4;
        TRparen trparenNode5;
        TColon tcolonNode6;
        PStmtseq pstmtseqNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tintnumNode4 = (TIntnum)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        pstmtseqNode7 = (PStmtseq)nodeArrayList6.get(0);

        pmorecasesNode1 = new AMorecases(tcaseNode2, tlparenNode3, tintnumNode4, trparenNode5, tcolonNode6, pstmtseqNode7, null);
        }
	nodeList.add(pmorecasesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAmorecases2Morecases */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMorecases pmorecasesNode1;
        {
            // Block
        TCase tcaseNode2;
        TLparen tlparenNode3;
        TIntnum tintnumNode4;
        TRparen trparenNode5;
        TColon tcolonNode6;
        PStmtseq pstmtseqNode7;
        PBreakpart pbreakpartNode8;
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tintnumNode4 = (TIntnum)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        pstmtseqNode7 = (PStmtseq)nodeArrayList6.get(0);
        pbreakpartNode8 = (PBreakpart)nodeArrayList7.get(0);

        pmorecasesNode1 = new AMorecases(tcaseNode2, tlparenNode3, tintnumNode4, trparenNode5, tcolonNode6, pstmtseqNode7, pbreakpartNode8);
        }
	nodeList.add(pmorecasesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(trealNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AVoidType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AMultiplyMultop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultop pmultopNode1;
        {
            // Block
        TTimes ttimesNode2;
        ttimesNode2 = (TTimes)nodeArrayList1.get(0);

        pmultopNode1 = new AMultiplyMultop(ttimesNode2);
        }
	nodeList.add(pmultopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ADivideMultop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultop pmultopNode1;
        {
            // Block
        TDivide tdivideNode2;
        tdivideNode2 = (TDivide)nodeArrayList1.get(0);

        pmultopNode1 = new ADivideMultop(tdivideNode2);
        }
	nodeList.add(pmultopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APlusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        paddopNode1 = new APlusAddop(tplusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AMinusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        paddopNode1 = new AMinusAddop(tminusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ADbleqlCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TDoubleequals tdoubleequalsNode2;
        tdoubleequalsNode2 = (TDoubleequals)nodeArrayList1.get(0);

        pcondNode1 = new ADbleqlCond(tdoubleequalsNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANeqlCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TNotequals tnotequalsNode2;
        tnotequalsNode2 = (TNotequals)nodeArrayList1.get(0);

        pcondNode1 = new ANeqlCond(tnotequalsNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AGteqlCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TGtequals tgtequalsNode2;
        tgtequalsNode2 = (TGtequals)nodeArrayList1.get(0);

        pcondNode1 = new AGteqlCond(tgtequalsNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ALteqlCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TLtequals tltequalsNode2;
        tltequalsNode2 = (TLtequals)nodeArrayList1.get(0);

        pcondNode1 = new ALteqlCond(tltequalsNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AGtCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcondNode1 = new AGtCond(tgtNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ALtCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcondNode1 = new ALtCond(tltNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AVarIdbool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdbool pidboolNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidboolNode1 = new AVarIdbool(tidNode2);
        }
	nodeList.add(pidboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ABoolIdbool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdbool pidboolNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);

        pidboolNode1 = new ABoolIdbool(pbooleanNode2);
        }
	nodeList.add(pidboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATrueBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanNode1 = new ATrueBoolean(ttrueNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AFalseBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanNode1 = new AFalseBoolean(tfalseNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ACondBoolean */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        PExpr pexprNode2;
        PCond pcondNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pbooleanNode1 = new ACondBoolean(pexprNode2, pcondNode3, pexprNode4);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AExpFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpr pexprNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pfactorNode1 = new AExpFactor(tlparenNode2, pexprNode3, trparenNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AMinusfactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PFactor pfactorNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new AMinusfactorFactor(tminusNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AIntegerFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntnum tintnumNode2;
        tintnumNode2 = (TIntnum)nodeArrayList1.get(0);

        pfactorNode1 = new AIntegerFactor(tintnumNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ARealFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRealnum trealnumNode2;
        trealnumNode2 = (TRealnum)nodeArrayList1.get(0);

        pfactorNode1 = new ARealFactor(trealnumNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAidfactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pfactorNode1 = new AIdFactor(tidNode2, null);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AAidfactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);

        pfactorNode1 = new AIdFactor(tidNode2, tsubsetNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AListFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        TLparen tlparenNode3;
        PVarlisttwo pvarlisttwoNode4;
        TRparen trparenNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pvarlisttwoNode4 = (PVarlisttwo)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pfactorNode1 = new AListFactor(tidNode2, tlparenNode3, pvarlisttwoNode4, trparenNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AAclassmethodfactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparenNode6 = (TLparen)nodeArrayList4.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList5.get(0);
        trparenNode8 = (TRparen)nodeArrayList6.get(0);

        pfactorNode1 = new AClassmethodFactor(tidNode2, null, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AAclassmethodfactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        TSubset tsubsetNode3;
        TPeriod tperiodNode4;
        TId tidNode5;
        TLparen tlparenNode6;
        PVarlisttwo pvarlisttwoNode7;
        TRparen trparenNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsubsetNode3 = (TSubset)nodeArrayList2.get(0);
        tperiodNode4 = (TPeriod)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        pvarlisttwoNode7 = (PVarlisttwo)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);

        pfactorNode1 = new AClassmethodFactor(tidNode2, tsubsetNode3, tperiodNode4, tidNode5, tlparenNode6, pvarlisttwoNode7, trparenNode8);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AMultopTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PMultop pmultopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pmultopNode3 = (PMultop)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultopTerm(ptermNode2, pmultopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AAddopExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PAddop paddopNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        paddopNode3 = (PAddop)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AAddopExpr(pexprNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$Idtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdtail pidtailNode1;
        pidtailNode1 = (PIdtail)nodeArrayList1.get(0);
	if(pidtailNode1 != null)
	{
	  listNode2.add(pidtailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$Idtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PIdtail pidtailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidtailNode2 = (PIdtail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidtailNode2 != null)
	{
	  listNode3.add(pidtailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$Stmtdotidtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmtdotidtail pstmtdotidtailNode1;
        pstmtdotidtailNode1 = (PStmtdotidtail)nodeArrayList1.get(0);
	if(pstmtdotidtailNode1 != null)
	{
	  listNode2.add(pstmtdotidtailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$Stmtdotidtail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmtdotidtail pstmtdotidtailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtdotidtailNode2 = (PStmtdotidtail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtdotidtailNode2 != null)
	{
	  listNode3.add(pstmtdotidtailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$Morecases */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMorecases pmorecasesNode1;
        pmorecasesNode1 = (PMorecases)nodeArrayList1.get(0);
	if(pmorecasesNode1 != null)
	{
	  listNode2.add(pmorecasesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$Morecases */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMorecases pmorecasesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmorecasesNode2 = (PMorecases)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmorecasesNode2 != null)
	{
	  listNode3.add(pmorecasesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$Varlisttail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarlisttail pvarlisttailNode1;
        pvarlisttailNode1 = (PVarlisttail)nodeArrayList1.get(0);
	if(pvarlisttailNode1 != null)
	{
	  listNode2.add(pvarlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$Varlisttail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarlisttail pvarlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarlisttailNode2 = (PVarlisttail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarlisttailNode2 != null)
	{
	  listNode3.add(pvarlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ATerminal$Varlisttwotail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarlisttwotail pvarlisttwotailNode1;
        pvarlisttwotailNode1 = (PVarlisttwotail)nodeArrayList1.get(0);
	if(pvarlisttwotailNode1 != null)
	{
	  listNode2.add(pvarlisttwotailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ANonTerminal$Varlisttwotail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarlisttwotail pvarlisttwotailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarlisttwotailNode2 = (PVarlisttwotail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarlisttwotailNode2 != null)
	{
	  listNode3.add(pvarlisttwotailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 2}, {53, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, {2, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 11}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, {36, SHIFT, 15}, {41, SHIFT, 16}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 13}, {45, SHIFT, 19}, },
			{{-1, ERROR, 14}, {27, SHIFT, 20}, },
			{{-1, ERROR, 15}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, ERROR, 16}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 18}, {36, SHIFT, 24}, {41, SHIFT, 16}, },
			{{-1, ERROR, 19}, {25, SHIFT, 26}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 22}, {37, SHIFT, 28}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 24}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 63}, {45, SHIFT, 30}, },
			{{-1, ERROR, 27}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {26, SHIFT, 32}, {45, SHIFT, 33}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 29}, {37, SHIFT, 38}, },
			{{-1, ERROR, 30}, {36, SHIFT, 39}, },
			{{-1, ERROR, 31}, {24, SHIFT, 40}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 80}, {36, SHIFT, 41}, {41, SHIFT, 16}, {43, SHIFT, 42}, {52, SHIFT, 43}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 37}, {45, SHIFT, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 39}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, ERROR, 40}, {27, SHIFT, 47}, },
			{{-1, ERROR, 41}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, ERROR, 42}, {52, SHIFT, 49}, },
			{{-1, ERROR, 43}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 44}, {36, SHIFT, 58}, {41, SHIFT, 16}, },
			{{-1, ERROR, 45}, {25, SHIFT, 59}, },
			{{-1, REDUCE, 59}, {41, SHIFT, 60}, {43, SHIFT, 61}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 48}, {37, SHIFT, 73}, },
			{{-1, ERROR, 49}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 50}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 51}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 100}, {25, SHIFT, 77}, {40, SHIFT, 78}, {43, SHIFT, 79}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 108}, {34, SHIFT, 80}, {35, SHIFT, 81}, },
			{{-1, ERROR, 57}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 85}, },
			{{-1, ERROR, 58}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, REDUCE, 63}, {45, SHIFT, 30}, },
			{{-1, ERROR, 60}, {45, SHIFT, 89}, },
			{{-1, REDUCE, 60}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 61}, {41, SHIFT, 60}, },
			{{-1, ERROR, 64}, {25, SHIFT, 92}, },
			{{-1, ERROR, 65}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 66}, {25, SHIFT, 94}, },
			{{-1, ERROR, 67}, {25, SHIFT, 95}, },
			{{-1, ERROR, 68}, {25, SHIFT, 96}, },
			{{-1, ERROR, 69}, {25, SHIFT, 97}, },
			{{-1, ERROR, 70}, {25, SHIFT, 98}, {32, SHIFT, 99}, {33, SHIFT, 100}, {36, SHIFT, 101}, {40, SHIFT, 102}, {41, SHIFT, 16}, {43, SHIFT, 103}, {52, SHIFT, 104}, },
			{{-1, ERROR, 71}, {26, SHIFT, 106}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 74}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 108}, },
			{{-1, ERROR, 75}, {24, SHIFT, 109}, {32, SHIFT, 83}, {33, SHIFT, 84}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 78}, {45, SHIFT, 115}, },
			{{-1, REDUCE, 101}, {40, SHIFT, 116}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 82}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 86}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 87}, {37, SHIFT, 119}, },
			{{-1, ERROR, 88}, {24, SHIFT, 120}, },
			{{-1, ERROR, 89}, {36, SHIFT, 121}, },
			{{-1, REDUCE, 62}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 92}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 122}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 93}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 126}, },
			{{-1, ERROR, 94}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 95}, {45, SHIFT, 128}, },
			{{-1, ERROR, 96}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 97}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 130}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 99}, {32, SHIFT, 133}, },
			{{-1, ERROR, 100}, {33, SHIFT, 134}, },
			{{-1, ERROR, 101}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, ERROR, 102}, {45, SHIFT, 136}, },
			{{-1, ERROR, 103}, {32, SHIFT, 137}, {33, SHIFT, 138}, {40, SHIFT, 139}, {52, SHIFT, 140}, },
			{{-1, ERROR, 104}, {6, SHIFT, 141}, {18, SHIFT, 110}, {19, SHIFT, 111}, {22, SHIFT, 142}, {25, SHIFT, 50}, {33, SHIFT, 51}, {44, SHIFT, 143}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 105}, {36, SHIFT, 146}, {41, SHIFT, 16}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 112}, {24, SHIFT, 147}, },
			{{-1, REDUCE, 68}, {41, SHIFT, 148}, },
			{{-1, REDUCE, 66}, {30, SHIFT, 151}, {31, SHIFT, 152}, {32, SHIFT, 83}, {33, SHIFT, 84}, {41, SHIFT, 148}, {48, SHIFT, 153}, {49, SHIFT, 154}, {50, SHIFT, 155}, {51, SHIFT, 156}, },
			{{-1, ERROR, 115}, {25, SHIFT, 159}, },
			{{-1, ERROR, 116}, {45, SHIFT, 160}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 107}, {34, SHIFT, 80}, {35, SHIFT, 81}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 120}, {27, SHIFT, 161}, },
			{{-1, ERROR, 121}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, REDUCE, 100}, {24, REDUCE, 91}, {25, SHIFT, 77}, {40, SHIFT, 78}, {43, SHIFT, 79}, },
			{{-1, ERROR, 123}, {24, SHIFT, 163}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 125}, {30, SHIFT, 151}, {31, SHIFT, 152}, {32, SHIFT, 83}, {33, SHIFT, 84}, {48, SHIFT, 153}, {49, SHIFT, 154}, {50, SHIFT, 155}, {51, SHIFT, 156}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 127}, {24, SHIFT, 164}, {32, SHIFT, 83}, {33, SHIFT, 84}, },
			{{-1, ERROR, 128}, {24, SHIFT, 165}, {43, SHIFT, 166}, },
			{{-1, ERROR, 129}, {24, SHIFT, 167}, },
			{{-1, REDUCE, 80}, {52, SHIFT, 168}, },
			{{-1, ERROR, 131}, {45, SHIFT, 169}, },
			{{-1, ERROR, 132}, {24, SHIFT, 170}, },
			{{-1, ERROR, 133}, {37, SHIFT, 171}, },
			{{-1, ERROR, 134}, {37, SHIFT, 172}, },
			{{-1, ERROR, 135}, {37, SHIFT, 173}, {43, SHIFT, 174}, },
			{{-1, ERROR, 136}, {25, SHIFT, 175}, },
			{{-1, ERROR, 137}, {32, SHIFT, 176}, },
			{{-1, ERROR, 138}, {33, SHIFT, 177}, },
			{{-1, ERROR, 139}, {45, SHIFT, 178}, },
			{{-1, ERROR, 140}, {6, SHIFT, 179}, {18, SHIFT, 110}, {19, SHIFT, 111}, {22, SHIFT, 180}, {25, SHIFT, 50}, {33, SHIFT, 51}, {44, SHIFT, 181}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 141}, {45, SHIFT, 184}, },
			{{-1, ERROR, 142}, {25, SHIFT, 185}, },
			{{-1, ERROR, 143}, {37, SHIFT, 186}, },
			{{-1, ERROR, 144}, {37, SHIFT, 187}, },
			{{-1, ERROR, 145}, {30, SHIFT, 151}, {31, SHIFT, 152}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 188}, {48, SHIFT, 153}, {49, SHIFT, 154}, {50, SHIFT, 155}, {51, SHIFT, 156}, },
			{{-1, ERROR, 146}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {45, SHIFT, 21}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 148}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 69}, {41, SHIFT, 148}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 157}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 67}, {41, SHIFT, 148}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 160}, {25, SHIFT, 195}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 57}, {43, SHIFT, 197}, },
			{{-1, ERROR, 163}, {5, SHIFT, 198}, },
			{{-1, ERROR, 164}, {27, SHIFT, 199}, },
			{{-1, ERROR, 165}, {37, SHIFT, 200}, },
			{{-1, ERROR, 166}, {24, SHIFT, 201}, },
			{{-1, ERROR, 167}, {27, SHIFT, 202}, },
			{{-1, ERROR, 168}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 169}, {52, SHIFT, 204}, },
			{{-1, ERROR, 170}, {37, SHIFT, 205}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 174}, {37, SHIFT, 206}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 176}, {37, SHIFT, 208}, },
			{{-1, ERROR, 177}, {37, SHIFT, 209}, },
			{{-1, ERROR, 178}, {25, SHIFT, 210}, },
			{{-1, ERROR, 179}, {45, SHIFT, 211}, },
			{{-1, ERROR, 180}, {25, SHIFT, 212}, },
			{{-1, ERROR, 181}, {37, SHIFT, 213}, },
			{{-1, ERROR, 182}, {37, SHIFT, 214}, },
			{{-1, ERROR, 183}, {30, SHIFT, 151}, {31, SHIFT, 152}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 215}, {48, SHIFT, 153}, {49, SHIFT, 154}, {50, SHIFT, 155}, {51, SHIFT, 156}, },
			{{-1, ERROR, 184}, {25, SHIFT, 216}, },
			{{-1, ERROR, 185}, {24, SHIFT, 217}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 189}, {37, SHIFT, 218}, {43, SHIFT, 219}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, {30, SHIFT, 151}, {31, SHIFT, 152}, {32, SHIFT, 83}, {33, SHIFT, 84}, {48, SHIFT, 153}, {49, SHIFT, 154}, {50, SHIFT, 155}, {51, SHIFT, 156}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 95}, {32, SHIFT, 83}, {33, SHIFT, 84}, },
			{{-1, ERROR, 194}, {24, SHIFT, 220}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 196}, {26, SHIFT, 222}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 198}, {27, SHIFT, 223}, },
			{{-1, ERROR, 199}, {14, SHIFT, 224}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 201}, {37, SHIFT, 225}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 203}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 227}, },
			{{-1, ERROR, 204}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 207}, {24, SHIFT, 229}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 211}, {25, SHIFT, 231}, },
			{{-1, ERROR, 212}, {24, SHIFT, 232}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 216}, {24, SHIFT, 233}, },
			{{-1, ERROR, 217}, {37, SHIFT, 234}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 219}, {37, SHIFT, 235}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 221}, {24, SHIFT, 236}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 224}, {25, SHIFT, 238}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 226}, {26, SHIFT, 239}, },
			{{-1, ERROR, 227}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 228}, {32, SHIFT, 83}, {33, SHIFT, 84}, {37, SHIFT, 241}, },
			{{-1, ERROR, 229}, {37, SHIFT, 242}, {40, SHIFT, 243}, },
			{{-1, ERROR, 230}, {24, SHIFT, 246}, },
			{{-1, ERROR, 231}, {24, SHIFT, 247}, },
			{{-1, ERROR, 232}, {37, SHIFT, 248}, },
			{{-1, ERROR, 233}, {37, SHIFT, 249}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 237}, {26, SHIFT, 250}, },
			{{-1, ERROR, 238}, {47, SHIFT, 251}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 240}, {37, SHIFT, 252}, },
			{{-1, ERROR, 241}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 243}, {45, SHIFT, 254}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 245}, {37, SHIFT, 255}, {40, SHIFT, 243}, },
			{{-1, ERROR, 246}, {37, SHIFT, 257}, {40, SHIFT, 243}, },
			{{-1, ERROR, 247}, {37, SHIFT, 259}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 30}, {4, SHIFT, 260}, },
			{{-1, ERROR, 251}, {24, SHIFT, 261}, },
			{{-1, ERROR, 252}, {45, SHIFT, 262}, },
			{{-1, ERROR, 253}, {37, SHIFT, 264}, },
			{{-1, ERROR, 254}, {25, SHIFT, 265}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 258}, {37, SHIFT, 266}, {40, SHIFT, 243}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 260}, {27, SHIFT, 267}, },
			{{-1, ERROR, 261}, {36, SHIFT, 268}, },
			{{-1, ERROR, 262}, {32, SHIFT, 269}, {33, SHIFT, 270}, {52, SHIFT, 271}, },
			{{-1, ERROR, 263}, {24, SHIFT, 272}, },
			{{-1, ERROR, 264}, {45, SHIFT, 262}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 110}, {19, SHIFT, 111}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 269}, {32, SHIFT, 277}, },
			{{-1, ERROR, 270}, {33, SHIFT, 278}, },
			{{-1, ERROR, 271}, {25, SHIFT, 50}, {33, SHIFT, 51}, {45, SHIFT, 52}, {46, SHIFT, 53}, {47, SHIFT, 54}, },
			{{-1, ERROR, 272}, {27, SHIFT, 280}, },
			{{-1, ERROR, 273}, {24, SHIFT, 281}, },
			{{-1, ERROR, 274}, {24, SHIFT, 282}, },
			{{-1, ERROR, 275}, {26, SHIFT, 283}, },
			{{-1, ERROR, 276}, {14, SHIFT, 284}, {15, SHIFT, 285}, {16, SHIFT, 286}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, {32, SHIFT, 83}, {33, SHIFT, 84}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 281}, {27, SHIFT, 291}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 284}, {25, SHIFT, 292}, },
			{{-1, ERROR, 285}, {36, SHIFT, 293}, },
			{{-1, ERROR, 286}, {37, SHIFT, 294}, },
			{{-1, ERROR, 287}, {14, SHIFT, 284}, {15, SHIFT, 295}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 289}, {14, SHIFT, 284}, {15, SHIFT, 297}, },
			{{-1, ERROR, 290}, {26, SHIFT, 299}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 292}, {47, SHIFT, 301}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 295}, {36, SHIFT, 303}, },
			{{-1, ERROR, 296}, {14, SHIFT, 284}, {15, SHIFT, 304}, },
			{{-1, ERROR, 297}, {36, SHIFT, 305}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 300}, {26, SHIFT, 306}, },
			{{-1, ERROR, 301}, {24, SHIFT, 307}, },
			{{-1, ERROR, 302}, {26, SHIFT, 308}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 304}, {36, SHIFT, 310}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 307}, {36, SHIFT, 312}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 309}, {26, SHIFT, 313}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, ERROR, 311}, {26, SHIFT, 315}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 64}, {7, SHIFT, 65}, {13, SHIFT, 66}, {17, SHIFT, 67}, {20, SHIFT, 68}, {21, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 314}, {26, SHIFT, 317}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 73}, {16, SHIFT, 286}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 74}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 12}, },
			{{-1, 27}, },
			{{-1, 34}, },
			{{-1, 35}, },
			{{-1, 36}, },
			{{-1, 263}, {264, 273}, },
			{{-1, 244}, {245, 256}, {258, 256}, },
			{{-1, 71}, {72, 107}, {161, 196}, {202, 226}, {223, 237}, {267, 275}, {268, 276}, {280, 290}, {291, 300}, {293, 302}, {303, 309}, {305, 311}, {310, 314}, {312, 316}, },
			{{-1, 72}, },
			{{-1, 62}, {63, 91}, {90, 91}, },
			{{-1, 31}, {59, 88}, },
			{{-1, 149}, {150, 192}, {158, 192}, },
			{{-1, 112}, {98, 132}, {159, 194}, {175, 207}, {195, 221}, {210, 230}, {265, 274}, },
			{{-1, 17}, {18, 25}, {44, 25}, {105, 25}, },
			{{-1, 287}, {316, 318}, },
			{{-1, 288}, {289, 298}, {296, 298}, },
			{{-1, 13}, {15, 22}, {24, 29}, {27, 37}, {39, 46}, {41, 48}, {58, 87}, {97, 131}, {101, 135}, {121, 162}, {146, 189}, },
			{{-1, 82}, },
			{{-1, 86}, },
			{{-1, 157}, },
			{{-1, 123}, },
			{{-1, 113}, {92, 124}, {96, 129}, {104, 144}, {140, 182}, {148, 190}, {227, 240}, {241, 253}, },
			{{-1, 55}, {51, 76}, {82, 117}, },
			{{-1, 56}, {86, 118}, },
			{{-1, 114}, {43, 57}, {49, 74}, {50, 75}, {65, 93}, {92, 125}, {94, 127}, {96, 125}, {104, 145}, {140, 183}, {148, 191}, {157, 193}, {168, 203}, {204, 228}, {227, 125}, {241, 125}, {271, 279}, },
			{{-1, 18}, {33, 44}, {70, 105}, },
			{{-1, 245}, {246, 258}, },
			{{-1, 289}, {287, 296}, },
			{{-1, 63}, {61, 90}, },
			{{-1, 150}, {114, 158}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'BEGIN'",
			"expecting: 'END', 'CLASS', 'INT', 'REAL', 'STRING', 'BOOLEAN', 'VOID', id",
			"expecting: EOF",
			"expecting: id",
			"expecting: ')', ';', ',', subset, id",
			"expecting: colon, ',', id",
			"expecting: '{'",
			"expecting: 'INT', 'REAL', 'STRING', 'BOOLEAN', 'VOID', id",
			"expecting: colon, ','",
			"expecting: '('",
			"expecting: 'INT', 'REAL', 'STRING', 'BOOLEAN', 'VOID', '}', id",
			"expecting: ')', ';', ',', subset",
			"expecting: ';'",
			"expecting: ')', id",
			"expecting: colon",
			"expecting: ')'",
			"expecting: colon, ',', subset, id, assign",
			"expecting: assign",
			"expecting: '(', '-', id, realnum, intnum",
			"expecting: ')', ',', subset",
			"expecting: 'IF', 'RETURN', 'SWITCH', 'PUT', 'WHILE', 'FOR', '}', id",
			"expecting: ')', '(', gt, lt, '+', '-', '*', '/', ';', period, ',', subset, doubleequals, notequals, gtequals, ltequals",
			"expecting: ')', gt, lt, '+', '-', '*', '/', ';', ',', doubleequals, notequals, gtequals, ltequals",
			"expecting: '+', '-', ';'",
			"expecting: ')', ','",
			"expecting: '(', '+', '-', colon, period, ',', subset, assign",
			"expecting: '}'",
			"expecting: 'IF', 'RETURN', 'SWITCH', 'CASE', 'DEFAULT', 'BREAK', 'PUT', 'WHILE', 'FOR', '}', id",
			"expecting: ')', '+', '-'",
			"expecting: 'TRUE', 'FALSE', ')', '(', '-', id, realnum, intnum",
			"expecting: ')', gt, lt, '+', '-', '*', '/', ';', period, ',', doubleequals, notequals, gtequals, ltequals",
			"expecting: 'TRUE', 'FALSE', '(', '-', id, realnum, intnum",
			"expecting: '+'",
			"expecting: '-'",
			"expecting: '+', '-', period, assign",
			"expecting: 'NEW', 'TRUE', 'FALSE', 'GET', '(', '-', stringlit, id, realnum, intnum",
			"expecting: 'CASE', 'DEFAULT', 'BREAK', '}'",
			"expecting: ')', ';', ','",
			"expecting: ')', gt, lt, '+', '-', ',', doubleequals, notequals, gtequals, ltequals",
			"expecting: ')', '(', gt, lt, '+', '-', '*', '/', period, subset, doubleequals, notequals, gtequals, ltequals",
			"expecting: gt, lt, '+', '-', doubleequals, notequals, gtequals, ltequals",
			"expecting: ')', subset",
			"expecting: id, assign",
			"expecting: ';', subset",
			"expecting: gt, lt, '+', '-', ';', doubleequals, notequals, gtequals, ltequals",
			"expecting: 'THEN'",
			"expecting: ')', '+', '-', ';', ','",
			"expecting: 'CASE'",
			"expecting: ';', period",
			"expecting: intnum",
			"expecting: 'IF', 'ELSE', 'RETURN', 'SWITCH', 'CASE', 'DEFAULT', 'BREAK', 'PUT', 'WHILE', 'FOR', '}', id",
			"expecting: '+', '-', assign",
			"expecting: 'IF', 'RETURN', 'SWITCH', 'CASE', 'DEFAULT', 'BREAK', 'PUT', 'WHILE', 'FOR', id",
			"expecting: 'CASE', 'DEFAULT', 'BREAK'",
			"expecting: 'CASE', 'DEFAULT'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 2, 3, 4, 4, 4, 4, 4, 5, 1, 3, 6, 7, 3, 8, 8, 9, 10, 11, 12, 8, 7, 8, 13, 10, 1, 12, 14, 15, 1, 16, 10, 10, 10, 3, 1, 7, 6, 7, 17, 18, 8, 9, 19, 20, 12, 18, 18, 18, 21, 22, 22, 22, 22, 23, 7, 13, 3, 24, 24, 24, 9, 18, 9, 9, 9, 9, 25, 26, 27, 10, 23, 28, 22, 29, 3, 30, 18, 18, 18, 18, 18, 10, 18, 12, 15, 14, 24, 24, 31, 23, 18, 3, 31, 7, 29, 32, 33, 7, 3, 34, 35, 8, 1, 36, 10, 22, 37, 37, 15, 24, 38, 9, 3, 22, 22, 10, 6, 7, 39, 15, 15, 40, 27, 28, 41, 15, 42, 3, 15, 12, 12, 43, 9, 32, 33, 3, 35, 3, 9, 12, 12, 44, 7, 22, 31, 24, 24, 18, 18, 18, 18, 18, 18, 18, 24, 29, 9, 20, 19, 45, 6, 12, 15, 6, 18, 17, 12, 27, 27, 27, 12, 29, 12, 12, 9, 3, 9, 12, 12, 44, 9, 15, 27, 27, 27, 43, 24, 38, 24, 46, 15, 29, 26, 24, 6, 47, 27, 12, 20, 23, 18, 27, 27, 15, 27, 27, 29, 9, 15, 27, 27, 27, 15, 12, 27, 12, 22, 15, 10, 20, 9, 27, 26, 31, 23, 48, 15, 15, 12, 12, 27, 27, 22, 26, 49, 27, 12, 31, 27, 3, 48, 48, 48, 12, 27, 27, 50, 15, 3, 12, 9, 27, 48, 27, 48, 27, 6, 14, 51, 15, 3, 29, 27, 20, 52, 32, 33, 18, 6, 15, 15, 26, 53, 15, 15, 28, 20, 6, 48, 27, 9, 14, 12, 54, 54, 54, 26, 20, 49, 20, 54, 14, 54, 14, 54, 27, 26, 15, 26, 20, 14, 20, 27, 14, 27, 26, 20, 26, 52, 27, 26, 27, 53, 27, 54, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
