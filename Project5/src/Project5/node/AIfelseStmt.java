/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AIfelseStmt extends PStmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PIdbool _idbool_;
    private TRparen _rparen_;
    private TThen _then_;
    private TLcurly _lcurly_;
    private PStmtseq _stmtseq_;
    private TRcurly _rcurly_;
    private TElse _else_;
    private TLcurly _lctwo_;
    private PStmtseq _stwo_;
    private TRcurly _rctwo_;

    public AIfelseStmt()
    {
        // Constructor
    }

    public AIfelseStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PIdbool _idbool_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") PStmtseq _stmtseq_,
        @SuppressWarnings("hiding") TRcurly _rcurly_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") TLcurly _lctwo_,
        @SuppressWarnings("hiding") PStmtseq _stwo_,
        @SuppressWarnings("hiding") TRcurly _rctwo_)
    {
        // Constructor
        setIf(_if_);

        setLparen(_lparen_);

        setIdbool(_idbool_);

        setRparen(_rparen_);

        setThen(_then_);

        setLcurly(_lcurly_);

        setStmtseq(_stmtseq_);

        setRcurly(_rcurly_);

        setElse(_else_);

        setLctwo(_lctwo_);

        setStwo(_stwo_);

        setRctwo(_rctwo_);

    }

    @Override
    public Object clone()
    {
        return new AIfelseStmt(
            cloneNode(this._if_),
            cloneNode(this._lparen_),
            cloneNode(this._idbool_),
            cloneNode(this._rparen_),
            cloneNode(this._then_),
            cloneNode(this._lcurly_),
            cloneNode(this._stmtseq_),
            cloneNode(this._rcurly_),
            cloneNode(this._else_),
            cloneNode(this._lctwo_),
            cloneNode(this._stwo_),
            cloneNode(this._rctwo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfelseStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PIdbool getIdbool()
    {
        return this._idbool_;
    }

    public void setIdbool(PIdbool node)
    {
        if(this._idbool_ != null)
        {
            this._idbool_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idbool_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public PStmtseq getStmtseq()
    {
        return this._stmtseq_;
    }

    public void setStmtseq(PStmtseq node)
    {
        if(this._stmtseq_ != null)
        {
            this._stmtseq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtseq_ = node;
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public TLcurly getLctwo()
    {
        return this._lctwo_;
    }

    public void setLctwo(TLcurly node)
    {
        if(this._lctwo_ != null)
        {
            this._lctwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lctwo_ = node;
    }

    public PStmtseq getStwo()
    {
        return this._stwo_;
    }

    public void setStwo(PStmtseq node)
    {
        if(this._stwo_ != null)
        {
            this._stwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stwo_ = node;
    }

    public TRcurly getRctwo()
    {
        return this._rctwo_;
    }

    public void setRctwo(TRcurly node)
    {
        if(this._rctwo_ != null)
        {
            this._rctwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rctwo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lparen_)
            + toString(this._idbool_)
            + toString(this._rparen_)
            + toString(this._then_)
            + toString(this._lcurly_)
            + toString(this._stmtseq_)
            + toString(this._rcurly_)
            + toString(this._else_)
            + toString(this._lctwo_)
            + toString(this._stwo_)
            + toString(this._rctwo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._idbool_ == child)
        {
            this._idbool_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._stmtseq_ == child)
        {
            this._stmtseq_ = null;
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._lctwo_ == child)
        {
            this._lctwo_ = null;
            return;
        }

        if(this._stwo_ == child)
        {
            this._stwo_ = null;
            return;
        }

        if(this._rctwo_ == child)
        {
            this._rctwo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._idbool_ == oldChild)
        {
            setIdbool((PIdbool) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._stmtseq_ == oldChild)
        {
            setStmtseq((PStmtseq) newChild);
            return;
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._lctwo_ == oldChild)
        {
            setLctwo((TLcurly) newChild);
            return;
        }

        if(this._stwo_ == oldChild)
        {
            setStwo((PStmtseq) newChild);
            return;
        }

        if(this._rctwo_ == oldChild)
        {
            setRctwo((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
