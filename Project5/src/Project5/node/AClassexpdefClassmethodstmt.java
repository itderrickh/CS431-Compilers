/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AClassexpdefClassmethodstmt extends PClassmethodstmt
{
    private TClas _clas_;
    private TId _id_;
    private TLcurly _lcurly_;
    private PMethodstmtseqs _methodstmtseqs_;
    private TRcurly _rcurly_;

    public AClassexpdefClassmethodstmt()
    {
        // Constructor
    }

    public AClassexpdefClassmethodstmt(
        @SuppressWarnings("hiding") TClas _clas_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") PMethodstmtseqs _methodstmtseqs_,
        @SuppressWarnings("hiding") TRcurly _rcurly_)
    {
        // Constructor
        setClas(_clas_);

        setId(_id_);

        setLcurly(_lcurly_);

        setMethodstmtseqs(_methodstmtseqs_);

        setRcurly(_rcurly_);

    }

    @Override
    public Object clone()
    {
        return new AClassexpdefClassmethodstmt(
            cloneNode(this._clas_),
            cloneNode(this._id_),
            cloneNode(this._lcurly_),
            cloneNode(this._methodstmtseqs_),
            cloneNode(this._rcurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassexpdefClassmethodstmt(this);
    }

    public TClas getClas()
    {
        return this._clas_;
    }

    public void setClas(TClas node)
    {
        if(this._clas_ != null)
        {
            this._clas_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._clas_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public PMethodstmtseqs getMethodstmtseqs()
    {
        return this._methodstmtseqs_;
    }

    public void setMethodstmtseqs(PMethodstmtseqs node)
    {
        if(this._methodstmtseqs_ != null)
        {
            this._methodstmtseqs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodstmtseqs_ = node;
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._clas_)
            + toString(this._id_)
            + toString(this._lcurly_)
            + toString(this._methodstmtseqs_)
            + toString(this._rcurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._clas_ == child)
        {
            this._clas_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._methodstmtseqs_ == child)
        {
            this._methodstmtseqs_ = null;
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._clas_ == oldChild)
        {
            setClas((TClas) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._methodstmtseqs_ == oldChild)
        {
            setMethodstmtseqs((PMethodstmtseqs) newChild);
            return;
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
