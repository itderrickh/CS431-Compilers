/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project5.node;

import Project5.analysis.*;

@SuppressWarnings("nls")
public final class AClassmethodFactor extends PFactor
{
    private TId _id_;
    private TSubset _subset_;
    private TPeriod _period_;
    private TId _nextid_;
    private TLparen _lparen_;
    private PVarlisttwo _varlisttwo_;
    private TRparen _rparen_;

    public AClassmethodFactor()
    {
        // Constructor
    }

    public AClassmethodFactor(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TSubset _subset_,
        @SuppressWarnings("hiding") TPeriod _period_,
        @SuppressWarnings("hiding") TId _nextid_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") PVarlisttwo _varlisttwo_,
        @SuppressWarnings("hiding") TRparen _rparen_)
    {
        // Constructor
        setId(_id_);

        setSubset(_subset_);

        setPeriod(_period_);

        setNextid(_nextid_);

        setLparen(_lparen_);

        setVarlisttwo(_varlisttwo_);

        setRparen(_rparen_);

    }

    @Override
    public Object clone()
    {
        return new AClassmethodFactor(
            cloneNode(this._id_),
            cloneNode(this._subset_),
            cloneNode(this._period_),
            cloneNode(this._nextid_),
            cloneNode(this._lparen_),
            cloneNode(this._varlisttwo_),
            cloneNode(this._rparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassmethodFactor(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TSubset getSubset()
    {
        return this._subset_;
    }

    public void setSubset(TSubset node)
    {
        if(this._subset_ != null)
        {
            this._subset_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subset_ = node;
    }

    public TPeriod getPeriod()
    {
        return this._period_;
    }

    public void setPeriod(TPeriod node)
    {
        if(this._period_ != null)
        {
            this._period_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._period_ = node;
    }

    public TId getNextid()
    {
        return this._nextid_;
    }

    public void setNextid(TId node)
    {
        if(this._nextid_ != null)
        {
            this._nextid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nextid_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public PVarlisttwo getVarlisttwo()
    {
        return this._varlisttwo_;
    }

    public void setVarlisttwo(PVarlisttwo node)
    {
        if(this._varlisttwo_ != null)
        {
            this._varlisttwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varlisttwo_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._subset_)
            + toString(this._period_)
            + toString(this._nextid_)
            + toString(this._lparen_)
            + toString(this._varlisttwo_)
            + toString(this._rparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._subset_ == child)
        {
            this._subset_ = null;
            return;
        }

        if(this._period_ == child)
        {
            this._period_ = null;
            return;
        }

        if(this._nextid_ == child)
        {
            this._nextid_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._varlisttwo_ == child)
        {
            this._varlisttwo_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._subset_ == oldChild)
        {
            setSubset((TSubset) newChild);
            return;
        }

        if(this._period_ == oldChild)
        {
            setPeriod((TPeriod) newChild);
            return;
        }

        if(this._nextid_ == oldChild)
        {
            setNextid((TId) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._varlisttwo_ == oldChild)
        {
            setVarlisttwo((PVarlisttwo) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
